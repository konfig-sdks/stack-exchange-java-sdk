/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.QuestionsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QueryApi
 */
@Disabled
public class QueryApiTest {

    private static QueryApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new QueryApi(apiClient);
    }

    /**
     * Returns questions which are similar to a hypothetical one based on a title and tag combination.   This method is roughly equivalent to a site&#39;s related questions suggestion on the ask page.   This method is useful for correlating data outside of a Stack Exchange site with similar content within one.   Note that title must always be passed as a parameter. tagged and nottagged are optional, semi-colon delimited lists of tags.   If tagged is passed it is treated as a preference, there is no guarantee that questions returned will have any of those tags. nottagged is treated as a requirement, no questions will be returned with those tags.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - relevance - order by \&quot;how similar\&quot; the questions are, most likely candidate first with a descending order Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void similarQuestionsSearchTest() throws ApiException {
        String site = null;
        String tagged = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        String nottagged = null;
        String title = null;
        List<QuestionsInner> response = api.similarQuestionsSearch(site)
                .tagged(tagged)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .nottagged(nottagged)
                .title(title)
                .execute();
        // TODO: test validations
    }

    /**
     * Searches a site for any questions which fit the given criteria.   This method is intentionally quite limited. For more general searching, you should use a proper internet search engine restricted to the domain of the site in question.   At least one of tagged or intitle must be set on this method. nottagged is only used if tagged is also set, for performance reasons.   tagged and nottagged are semi-colon delimited list of tags. At least 1 tag in tagged will be on each returned question if it is passed, making it the OR equivalent of the AND version of tagged on /questions.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - relevance - matches the relevance tab on the site itself Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void siteQuestionsSearchTest() throws ApiException {
        String site = null;
        String tagged = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        String intitle = null;
        String nottagged = null;
        List<QuestionsInner> response = api.siteQuestionsSearch(site)
                .tagged(tagged)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .intitle(intitle)
                .nottagged(nottagged)
                .execute();
        // TODO: test validations
    }

}
