/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CommentsInner;
import com.konfigthis.client.model.CreatedComment;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentApi
 */
@Disabled
public class CommentApiTest {

    private static CommentApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CommentApi(apiClient);
    }

    /**
     * Deletes a comment.   Use an access_token with write_access to delete a comment.   In practice, this method will never return an object. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteActionTest() throws ApiException {
        Integer id = null;
        String site = null;
        String filter = null;
        String paramCallback = null;
        Boolean preview = null;
        api.deleteAction(id, site)
                .filter(filter)
                .paramCallback(paramCallback)
                .preview(preview)
                .execute();
        // TODO: test validations
    }

    /**
     * Edit an existing comment.   Use an access_token with write_access to edit an existing comment.   This method return the created comment. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void editExistingTest() throws ApiException {
        Integer id = null;
        String site = null;
        String filter = null;
        String paramCallback = null;
        String body = null;
        Boolean preview = null;
        CreatedComment response = api.editExisting(id, site)
                .filter(filter)
                .paramCallback(paramCallback)
                .body(body)
                .preview(preview)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets the comments identified in id.   This method is most useful if you have a cache of comment ids obtained through other means (such as /questions/{id}/comments) but suspect the data may be stale.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for comment_id on comment objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of comments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentsByIdsTest() throws ApiException {
        String ids = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<CommentsInner> response = api.getCommentsByIds(ids, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets the comments on a question.   If you know that you have an question id and need the comments, use this method. If you know you have a answer id, use /answers/{ids}/comments. If you are unsure, use /posts/{ids}/comments.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of comments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommentsListTest() throws ApiException {
        String ids = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<CommentsInner> response = api.getCommentsList(ids, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the comments owned by the user associated with the given access_token that are in reply to the user identified by {toId}.   This method returns a list of comments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplyListTest() throws ApiException {
        Integer toId = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<CommentsInner> response = api.getReplyList(toId, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets all the comments on the site.   If you&#39;re filtering for interesting comments (by score, creation date, etc.) make use of the sort paramter with appropriate min and max values.   If you&#39;re looking to query conversations between users, instead use the /users/{ids}/mentioned and /users/{ids}/comments/{toid} methods.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of comments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCommentsTest() throws ApiException {
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<CommentsInner> response = api.listComments(site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the comments owned by the user associated with the given access_token.   This method returns a list of comments. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listOwnedCommentsTest() throws ApiException {
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<CommentsInner> response = api.listOwnedComments(site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

}
