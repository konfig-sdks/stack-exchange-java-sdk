/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.QuestionsInner;
import com.konfigthis.client.model.TagScoreObjectsInner;
import com.konfigthis.client.model.TagSynonymsInner;
import com.konfigthis.client.model.TagWikisInner;
import com.konfigthis.client.model.TagsInner;
import com.konfigthis.client.model.TopTagObjectsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagApi
 */
@Disabled
public class TagApiTest {

    private static TagApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TagApi(apiClient);
    }

    /**
     * Returns the frequently asked questions for the given set of tags in {tags}.   For a question to be returned, it must have all the tags in {tags} and be considered \&quot;frequently asked\&quot;. The exact algorithm for determining whether a question is considered a FAQ is subject to change at any time.   {tags} can contain up to 5 individual tags per request.   This method returns a list of questions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFaqQuestionsTest() throws ApiException {
        String tags = null;
        String site = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<QuestionsInner> response = api.getFaqQuestions(tags, site)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the tags found on a site that only moderators can use.   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname&#x3D;own would return both \&quot;download\&quot; and \&quot;owner\&quot; amongst others.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getModeratorOnlyTagsListTest() throws ApiException {
        String site = null;
        String inname = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagsInner> response = api.getModeratorOnlyTagsList(site)
                .inname(inname)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the tags that are most related to those in {tags}.   Including multiple tags in {tags} is equivalent to asking for \&quot;tags related to tag #1 and tag #2\&quot; not \&quot;tags related to tag #1 or tag #2\&quot;.   count on tag objects returned is the number of question with that tag that also share all those in {tags}.   {tags} can contain up to 4 individual tags per request.   This method returns a list of tags. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelatedTagsTest() throws ApiException {
        String tags = null;
        String site = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagsInner> response = api.getRelatedTags(tags, site)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns tag objects representing the tags in {tags} found on the site.   This method diverges from the standard naming patterns to avoid to conflicting with existing methods, due to the free form nature of tag names.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagInfoTest() throws ApiException {
        String tags = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagsInner> response = api.getTagInfo(tags, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the wikis that go with the given set of tags in {tags}.   Be aware that not all tags have wikis.   {tags} can contain up to 20 individual tags per request.   This method returns a list of tag wikis. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagWikisTest() throws ApiException {
        String tags = null;
        String site = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagWikisInner> response = api.getTagWikis(tags, site)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the top 30 askers active in a single tag, of either all-time or the last 30 days.   This is a view onto the data presented on the tag info page on the sites.   This method returns a list of tag score objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTopAskersByPeriodTest() throws ApiException {
        String tag = null;
        String period = null;
        String site = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagScoreObjectsInner> response = api.getTopAskersByPeriod(tag, period, site)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the tags the user identified by the access_token passed is active in.   This method returns a list of tags. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTagsListTest() throws ApiException {
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagsInner> response = api.getUserTagsList(site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the top 30 questions the user associated with the given access_token has posted in response to questions with the given tags.   This method returns a list of questions. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTopQuestionsTest() throws ApiException {
        String tags = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<QuestionsInner> response = api.getUserTopQuestions(tags, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the user identified by access_token&#39;s top 30 tags by question score.   This method returns a list of top tag objects. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTopTagsListTest() throws ApiException {
        String site = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TopTagObjectsInner> response = api.getUserTopTagsList(site)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the tags found on a site that fulfill required tag constraints on questions.   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname&#x3D;own would return both \&quot;download\&quot; and \&quot;owner\&quot; amongst others.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRequiredTagsTest() throws ApiException {
        String site = null;
        String inname = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagsInner> response = api.listRequiredTags(site)
                .inname(inname)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets all the synonyms that point to the tags identified in {tags}. If you&#39;re looking to discover all the tag synonyms on a site, use the /tags/synonyms methods instead of call this method on all tags.   {tags} can contain up to 20 individual tags per request.   The sorts accepted by this method operate on the follow fields of the tag_synonym object:  - creation - creation_date  - applied - applied_count  - activity - last_applied_date   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of tag synonyms. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSynonymsTest() throws ApiException {
        String tags = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagSynonymsInner> response = api.listSynonyms(tags, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns all tag synonyms found a site.   When searching for synonyms of specific tags, it is better to use /tags/{tags}/synonyms over this method.   The sorts accepted by this method operate on the follow fields of the tag_synonym object:  - creation - creation_date  - applied - applied_count  - activity - last_applied_date   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of tag_synonyms. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void synonymsListTest() throws ApiException {
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagSynonymsInner> response = api.synonymsList(site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

}
