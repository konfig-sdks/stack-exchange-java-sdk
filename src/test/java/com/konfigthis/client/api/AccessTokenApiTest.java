/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AccessTokensInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccessTokenApi
 */
@Disabled
public class AccessTokenApiTest {

    private static AccessTokenApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AccessTokenApi(apiClient);
    }

    /**
     * Passing valid access_tokens to this method causes the application that created them to be de-authorized by the user associated with each access_token. This will remove the application from their apps tab, and cause all other existing access_tokens to be destroyed.   This method is meant for uninstalling applications, recovering from access_token leaks, or simply as a stronger form of /access-tokens/{accessTokens}/invalidate.   Nothing prevents a user from re-authenticate to an application that has de-authenticated itself, the user will be prompted to approve the application again however.   {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.   This method returns a list of access_tokens. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deauthenticateListTest() throws ApiException {
        String accessTokens = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<AccessTokensInner> response = api.deauthenticateList(accessTokens)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Immediately expires the access tokens passed. This method is meant to allow an application to discard any active access tokens it no longer needs.   {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.   This method returns a list of access_tokens. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invalidateListTest() throws ApiException {
        String accessTokens = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<AccessTokensInner> response = api.invalidateList(accessTokens)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Reads the properties for a set of access tokens.   {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.   This method returns a list of access_tokens. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPropertiesForMultipleTokensTest() throws ApiException {
        String accessTokens = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<AccessTokensInner> response = api.listPropertiesForMultipleTokens(accessTokens)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

}
