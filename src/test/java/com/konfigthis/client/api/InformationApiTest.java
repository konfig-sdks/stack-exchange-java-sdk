/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.InfoObject;
import com.konfigthis.client.model.TagsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InformationApi
 */
@Disabled
public class InformationApiTest {

    private static InformationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new InformationApi(apiClient);
    }

    /**
     * Returns a collection of statistics about the site.   Data to facilitate per-site customization, discover related sites, and aggregate statistics is all returned by this method.   This data is cached very aggressively, by design. Query sparingly, ideally no more than once an hour.   This method returns an info object. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatisticsTest() throws ApiException {
        String site = null;
        InfoObject response = api.getStatistics(site)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the tags found on a site.   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname&#x3D;own would return both \&quot;download\&quot; and \&quot;owner\&quot; amongst others.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsListTest() throws ApiException {
        String site = null;
        String inname = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<TagsInner> response = api.getTagsList(site)
                .inname(inname)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

}
