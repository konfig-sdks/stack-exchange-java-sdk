/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.SuggestedEditsInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EditApi
 */
@Disabled
public class EditApiTest {

    private static EditApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EditApi(apiClient);
    }

    /**
     * Returns the suggested edits the user identified by access_token has submitted.   This method returns a list of suggested-edits. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSuggestedEditsTest() throws ApiException {
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<SuggestedEditsInner> response = api.getUserSuggestedEdits(site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns all the suggested edits in the systems.   This method returns a list of suggested-edits.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSuggestedEditsTest() throws ApiException {
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<SuggestedEditsInner> response = api.listSuggestedEdits(site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns suggested edits identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of suggested-edits. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSuggestedEdits_0Test() throws ApiException {
        String ids = null;
        String site = null;
        String order = null;
        String max = null;
        String min = null;
        String sort = null;
        Integer fromdate = null;
        Integer todate = null;
        Integer pagesize = null;
        Integer page = null;
        String filter = null;
        String paramCallback = null;
        List<SuggestedEditsInner> response = api.listSuggestedEdits_0(ids, site)
                .order(order)
                .max(max)
                .min(min)
                .sort(sort)
                .fromdate(fromdate)
                .todate(todate)
                .pagesize(pagesize)
                .page(page)
                .filter(filter)
                .paramCallback(paramCallback)
                .execute();
        // TODO: test validations
    }

}
