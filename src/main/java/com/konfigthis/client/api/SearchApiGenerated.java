/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.QuestionsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call siteQuestionsAdvancedSearchCall(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, String accepted, Integer answers, String body, String closed, String migrated, String notice, String nottagged, String q, String title, String url, Integer user, Integer views, String wiki, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagged", tagged));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        if (accepted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accepted", accepted));
        }

        if (answers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("answers", answers));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (closed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("closed", closed));
        }

        if (migrated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("migrated", migrated));
        }

        if (notice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notice", notice));
        }

        if (nottagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nottagged", nottagged));
        }

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (user != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("user", user));
        }

        if (views != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("views", views));
        }

        if (wiki != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("wiki", wiki));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call siteQuestionsAdvancedSearchValidateBeforeCall(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, String accepted, Integer answers, String body, String closed, String migrated, String notice, String nottagged, String q, String title, String url, Integer user, Integer views, String wiki, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling siteQuestionsAdvancedSearch(Async)");
        }

        return siteQuestionsAdvancedSearchCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki, _callback);

    }


    private ApiResponse<List<QuestionsInner>> siteQuestionsAdvancedSearchWithHttpInfo(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, String accepted, Integer answers, String body, String closed, String migrated, String notice, String nottagged, String q, String title, String url, Integer user, Integer views, String wiki) throws ApiException {
        okhttp3.Call localVarCall = siteQuestionsAdvancedSearchValidateBeforeCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call siteQuestionsAdvancedSearchAsync(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, String accepted, Integer answers, String body, String closed, String migrated, String notice, String nottagged, String q, String title, String url, Integer user, Integer views, String wiki, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = siteQuestionsAdvancedSearchValidateBeforeCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SiteQuestionsAdvancedSearchRequestBuilder {
        private final String site;
        private String tagged;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;
        private String accepted;
        private Integer answers;
        private String body;
        private String closed;
        private String migrated;
        private String notice;
        private String nottagged;
        private String q;
        private String title;
        private String url;
        private Integer user;
        private Integer views;
        private String wiki;

        private SiteQuestionsAdvancedSearchRequestBuilder(String site) {
            this.site = site;
        }

        /**
         * Set tagged
         * @param tagged String list (semicolon delimited). (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder tagged(String tagged) {
            this.tagged = tagged;
            return this;
        }
        
        /**
         * Set order
         * @param order  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; relevance &#x3D;&gt; none  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; relevance &#x3D;&gt; none  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Set accepted
         * @param accepted  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder accepted(String accepted) {
            this.accepted = accepted;
            return this;
        }
        
        /**
         * Set answers
         * @param answers  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder answers(Integer answers) {
            this.answers = answers;
            return this;
        }
        
        /**
         * Set body
         * @param body  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder body(String body) {
            this.body = body;
            return this;
        }
        
        /**
         * Set closed
         * @param closed  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder closed(String closed) {
            this.closed = closed;
            return this;
        }
        
        /**
         * Set migrated
         * @param migrated  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder migrated(String migrated) {
            this.migrated = migrated;
            return this;
        }
        
        /**
         * Set notice
         * @param notice  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder notice(String notice) {
            this.notice = notice;
            return this;
        }
        
        /**
         * Set nottagged
         * @param nottagged String list (semicolon delimited). (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder nottagged(String nottagged) {
            this.nottagged = nottagged;
            return this;
        }
        
        /**
         * Set q
         * @param q  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set title
         * @param title  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder title(String title) {
            this.title = title;
            return this;
        }
        
        /**
         * Set url
         * @param url  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder url(String url) {
            this.url = url;
            return this;
        }
        
        /**
         * Set user
         * @param user  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder user(Integer user) {
            this.user = user;
            return this;
        }
        
        /**
         * Set views
         * @param views  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder views(Integer views) {
            this.views = views;
            return this;
        }
        
        /**
         * Set wiki
         * @param wiki  (optional)
         * @return SiteQuestionsAdvancedSearchRequestBuilder
         */
        public SiteQuestionsAdvancedSearchRequestBuilder wiki(String wiki) {
            this.wiki = wiki;
            return this;
        }
        
        /**
         * Build call for siteQuestionsAdvancedSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return siteQuestionsAdvancedSearchCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki, _callback);
        }


        /**
         * Execute siteQuestionsAdvancedSearch request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = siteQuestionsAdvancedSearchWithHttpInfo(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute siteQuestionsAdvancedSearch request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return siteQuestionsAdvancedSearchWithHttpInfo(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki);
        }

        /**
         * Execute siteQuestionsAdvancedSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return siteQuestionsAdvancedSearchAsync(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, accepted, answers, body, closed, migrated, notice, nottagged, q, title, url, user, views, wiki, _callback);
        }
    }

    /**
     * 
     * Searches a site for any questions which fit the given criteria.   Search criteria are expressed using the following parameters:   - q - a free form text parameter, will match all question properties based on an undocumented algorithm.  - accepted - true to return only questions with accepted answers, false to return only those without. Omit to elide constraint.  - answers - the minimum number of answers returned questions must have.  - body - text which must appear in returned questions&#39; bodies.  - closed - true to return only closed questions, false to return only open ones. Omit to elide constraint.  - migrated - true to return only questions migrated away from a site, false to return only those not. Omit to elide constraint.  - notice - true to return only questions with post notices, false to return only those without. Omit to elide constraint.  - nottagged - a semicolon delimited list of tags, none of which will be present on returned questions.  - tagged - a semicolon delimited list of tags, of which at least one will be present on all returned questions.  - title - text which must appear in returned questions&#39; titles.  - user - the id of the user who must own the questions returned.  - url - a url which must be contained in a post, may include a wildcard.  - views - the minimum number of views returned questions must have.  - wiki - true to return only community wiki questions, false to return only non-community wiki ones. Omit to elide constraint.      At least one additional parameter must be set if nottagged is set, for performance reasons.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - relevance - matches the relevance tab on the site itself Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return SiteQuestionsAdvancedSearchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public SiteQuestionsAdvancedSearchRequestBuilder siteQuestionsAdvancedSearch(String site) throws IllegalArgumentException {
        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new SiteQuestionsAdvancedSearchRequestBuilder(site);
    }
}
