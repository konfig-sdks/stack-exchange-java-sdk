/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.QuestionTimelineEventsInner;
import com.konfigthis.client.model.QuestionsInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class QuestionApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuestionApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public QuestionApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllQuestionsCall(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagged", tagged));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllQuestionsValidateBeforeCall(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getAllQuestions(Async)");
        }

        return getAllQuestionsCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> getAllQuestionsWithHttpInfo(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getAllQuestionsValidateBeforeCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllQuestionsAsync(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllQuestionsValidateBeforeCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllQuestionsRequestBuilder {
        private final String site;
        private String tagged;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetAllQuestionsRequestBuilder(String site) {
            this.site = site;
        }

        /**
         * Set tagged
         * @param tagged String list (semicolon delimited). (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder tagged(String tagged) {
            this.tagged = tagged;
            return this;
        }
        
        /**
         * Set order
         * @param order  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; hot &#x3D;&gt; none sort &#x3D; week &#x3D;&gt; none sort &#x3D; month &#x3D;&gt; none sort &#x3D; relevance &#x3D;&gt; none  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; hot &#x3D;&gt; none sort &#x3D; week &#x3D;&gt; none sort &#x3D; month &#x3D;&gt; none sort &#x3D; relevance &#x3D;&gt; none  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetAllQuestionsRequestBuilder
         */
        public GetAllQuestionsRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getAllQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllQuestionsCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getAllQuestions request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = getAllQuestionsWithHttpInfo(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllQuestions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return getAllQuestionsWithHttpInfo(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getAllQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return getAllQuestionsAsync(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Gets all the questions on the site.   This method allows you make fairly flexible queries across the entire corpus of questions on a site. For example, getting all questions asked in the the week of Jan 1st 2011 with scores of 10 or more is a single query with parameters sort&#x3D;votes&amp;min&#x3D;10&amp;fromdate&#x3D;1293840000&amp;todate&#x3D;1294444800.   To constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged&#x3D;c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - hot - by the formula ordering the hot tab Does not accept min or max  - week - by the formula ordering the week tab Does not accept min or max  - month - by the formula ordering the month tab Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetAllQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetAllQuestionsRequestBuilder getAllQuestions(String site) throws IllegalArgumentException {
        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetAllQuestionsRequestBuilder(site);
    }
    private okhttp3.Call getByIdsCall(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/questions/{ids}"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdsValidateBeforeCall(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getByIds(Async)");
        }

        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getByIds(Async)");
        }

        return getByIdsCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> getByIdsWithHttpInfo(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getByIdsValidateBeforeCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdsAsync(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdsValidateBeforeCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdsRequestBuilder {
        private final String ids;
        private final String site;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetByIdsRequestBuilder(String ids, String site) {
            this.ids = ids;
            this.site = site;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetByIdsRequestBuilder
         */
        public GetByIdsRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getByIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdsCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getByIds request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = getByIdsWithHttpInfo(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByIds request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return getByIdsWithHttpInfo(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getByIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return getByIdsAsync(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns the questions identified in {ids}.   This is most useful for fetching fresh data when maintaining a cache of question ids, or polling for changes.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     * @param ids Number list (semicolon delimited). (required)
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetByIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdsRequestBuilder getByIds(String ids, String site) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetByIdsRequestBuilder(ids, site);
    }
    private okhttp3.Call getLinkedQuestionsCall(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/questions/{ids}/linked"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLinkedQuestionsValidateBeforeCall(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getLinkedQuestions(Async)");
        }

        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getLinkedQuestions(Async)");
        }

        return getLinkedQuestionsCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> getLinkedQuestionsWithHttpInfo(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getLinkedQuestionsValidateBeforeCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLinkedQuestionsAsync(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLinkedQuestionsValidateBeforeCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLinkedQuestionsRequestBuilder {
        private final String ids;
        private final String site;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetLinkedQuestionsRequestBuilder(String ids, String site) {
            this.ids = ids;
            this.site = site;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; rank &#x3D;&gt; none  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; rank &#x3D;&gt; none  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetLinkedQuestionsRequestBuilder
         */
        public GetLinkedQuestionsRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getLinkedQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLinkedQuestionsCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getLinkedQuestions request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = getLinkedQuestionsWithHttpInfo(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLinkedQuestions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return getLinkedQuestionsWithHttpInfo(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getLinkedQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return getLinkedQuestionsAsync(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Gets questions which link to those questions identified in {ids}.   This method only considers questions that are linked within a site, and will never return questions from another Stack Exchange site.   A question is considered \&quot;linked\&quot; when it explicitly includes a hyperlink to another question, there are no other heuristics.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - rank - a priority sort by site applies, subject to change at any time Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     * @param ids Number list (semicolon delimited). (required)
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetLinkedQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetLinkedQuestionsRequestBuilder getLinkedQuestions(String ids, String site) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetLinkedQuestionsRequestBuilder(ids, site);
    }
    private okhttp3.Call getTimelineEventsCall(String ids, String site, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/questions/{ids}/timeline"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTimelineEventsValidateBeforeCall(String ids, String site, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getTimelineEvents(Async)");
        }

        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getTimelineEvents(Async)");
        }

        return getTimelineEventsCall(ids, site, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionTimelineEventsInner>> getTimelineEventsWithHttpInfo(String ids, String site, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getTimelineEventsValidateBeforeCall(ids, site, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionTimelineEventsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTimelineEventsAsync(String ids, String site, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionTimelineEventsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTimelineEventsValidateBeforeCall(ids, site, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionTimelineEventsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTimelineEventsRequestBuilder {
        private final String ids;
        private final String site;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetTimelineEventsRequestBuilder(String ids, String site) {
            this.ids = ids;
            this.site = site;
        }

        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetTimelineEventsRequestBuilder
         */
        public GetTimelineEventsRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetTimelineEventsRequestBuilder
         */
        public GetTimelineEventsRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetTimelineEventsRequestBuilder
         */
        public GetTimelineEventsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetTimelineEventsRequestBuilder
         */
        public GetTimelineEventsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetTimelineEventsRequestBuilder
         */
        public GetTimelineEventsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetTimelineEventsRequestBuilder
         */
        public GetTimelineEventsRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getTimelineEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTimelineEventsCall(ids, site, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getTimelineEvents request
         * @return List&lt;QuestionTimelineEventsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionTimelineEventsInner> execute() throws ApiException {
            ApiResponse<List<QuestionTimelineEventsInner>> localVarResp = getTimelineEventsWithHttpInfo(ids, site, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTimelineEvents request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionTimelineEventsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionTimelineEventsInner>> executeWithHttpInfo() throws ApiException {
            return getTimelineEventsWithHttpInfo(ids, site, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getTimelineEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionTimelineEventsInner>> _callback) throws ApiException {
            return getTimelineEventsAsync(ids, site, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns a subset of the events that have happened to the questions identified in id.   This provides data similar to that found on a question&#39;s timeline page.   Voting data is scrubbed to deter inferencing of voter identity.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   This method returns a list of question timeline events. 
     * @param ids Number list (semicolon delimited). (required)
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetTimelineEventsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetTimelineEventsRequestBuilder getTimelineEvents(String ids, String site) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetTimelineEventsRequestBuilder(ids, site);
    }
    private okhttp3.Call getUnacceptedListCall(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/questions/unaccepted";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnacceptedListValidateBeforeCall(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getUnacceptedList(Async)");
        }

        return getUnacceptedListCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> getUnacceptedListWithHttpInfo(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getUnacceptedListValidateBeforeCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnacceptedListAsync(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnacceptedListValidateBeforeCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUnacceptedListRequestBuilder {
        private final String site;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetUnacceptedListRequestBuilder(String site) {
            this.site = site;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetUnacceptedListRequestBuilder
         */
        public GetUnacceptedListRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getUnacceptedList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnacceptedListCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getUnacceptedList request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = getUnacceptedListWithHttpInfo(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUnacceptedList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return getUnacceptedListWithHttpInfo(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getUnacceptedList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return getUnacceptedListAsync(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns the questions owned by the user associated with the given access_token that have no accepted answer.   This method returns a list of questions. 
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetUnacceptedListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetUnacceptedListRequestBuilder getUnacceptedList(String site) throws IllegalArgumentException {
        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetUnacceptedListRequestBuilder(site);
    }
    private okhttp3.Call getUserFeaturedCall(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/questions/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserFeaturedValidateBeforeCall(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getUserFeatured(Async)");
        }

        return getUserFeaturedCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> getUserFeaturedWithHttpInfo(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getUserFeaturedValidateBeforeCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserFeaturedAsync(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserFeaturedValidateBeforeCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserFeaturedRequestBuilder {
        private final String site;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetUserFeaturedRequestBuilder(String site) {
            this.site = site;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetUserFeaturedRequestBuilder
         */
        public GetUserFeaturedRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getUserFeatured
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserFeaturedCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getUserFeatured request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = getUserFeaturedWithHttpInfo(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserFeatured request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return getUserFeaturedWithHttpInfo(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getUserFeatured request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return getUserFeaturedAsync(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns the questions that have active bounties offered by the user associated with the given access_token.   This method returns a list of questions. 
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetUserFeaturedRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetUserFeaturedRequestBuilder getUserFeatured(String site) throws IllegalArgumentException {
        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetUserFeaturedRequestBuilder(site);
    }
    private okhttp3.Call getUserQuestionsListCall(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/me/questions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserQuestionsListValidateBeforeCall(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling getUserQuestionsList(Async)");
        }

        return getUserQuestionsListCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> getUserQuestionsListWithHttpInfo(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = getUserQuestionsListValidateBeforeCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserQuestionsListAsync(String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserQuestionsListValidateBeforeCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetUserQuestionsListRequestBuilder {
        private final String site;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private GetUserQuestionsListRequestBuilder(String site) {
            this.site = site;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return GetUserQuestionsListRequestBuilder
         */
        public GetUserQuestionsListRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for getUserQuestionsList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserQuestionsListCall(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute getUserQuestionsList request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = getUserQuestionsListWithHttpInfo(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getUserQuestionsList request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return getUserQuestionsListWithHttpInfo(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute getUserQuestionsList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return getUserQuestionsListAsync(site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns the questions owned by the user associated with the given access_token.   This method returns a list of questions. 
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return GetUserQuestionsListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public GetUserQuestionsListRequestBuilder getUserQuestionsList(String site) throws IllegalArgumentException {
        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new GetUserQuestionsListRequestBuilder(site);
    }
    private okhttp3.Call listFeaturedQuestionsCall(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/questions/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tagged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tagged", tagged));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFeaturedQuestionsValidateBeforeCall(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling listFeaturedQuestions(Async)");
        }

        return listFeaturedQuestionsCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> listFeaturedQuestionsWithHttpInfo(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = listFeaturedQuestionsValidateBeforeCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFeaturedQuestionsAsync(String site, String tagged, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFeaturedQuestionsValidateBeforeCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFeaturedQuestionsRequestBuilder {
        private final String site;
        private String tagged;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private ListFeaturedQuestionsRequestBuilder(String site) {
            this.site = site;
        }

        /**
         * Set tagged
         * @param tagged String list (semicolon delimited). (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder tagged(String tagged) {
            this.tagged = tagged;
            return this;
        }
        
        /**
         * Set order
         * @param order  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return ListFeaturedQuestionsRequestBuilder
         */
        public ListFeaturedQuestionsRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for listFeaturedQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFeaturedQuestionsCall(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute listFeaturedQuestions request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = listFeaturedQuestionsWithHttpInfo(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFeaturedQuestions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return listFeaturedQuestionsWithHttpInfo(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute listFeaturedQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return listFeaturedQuestionsAsync(site, tagged, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns all the questions with active bounties in the system.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return ListFeaturedQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public ListFeaturedQuestionsRequestBuilder listFeaturedQuestions(String site) throws IllegalArgumentException {
        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new ListFeaturedQuestionsRequestBuilder(site);
    }
    private okhttp3.Call listRelatedQuestionsCall(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/questions/{ids}/related"
            .replace("{" + "ids" + "}", localVarApiClient.escapeString(ids.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (max != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max", max));
        }

        if (min != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("min", min));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fromdate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromdate", fromdate));
        }

        if (todate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("todate", todate));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (site != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("site", site));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRelatedQuestionsValidateBeforeCall(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling listRelatedQuestions(Async)");
        }

        // verify the required parameter 'site' is set
        if (site == null) {
            throw new ApiException("Missing the required parameter 'site' when calling listRelatedQuestions(Async)");
        }

        return listRelatedQuestionsCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);

    }


    private ApiResponse<List<QuestionsInner>> listRelatedQuestionsWithHttpInfo(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = listRelatedQuestionsValidateBeforeCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, null);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listRelatedQuestionsAsync(String ids, String site, String order, String max, String min, String sort, Integer fromdate, Integer todate, Integer pagesize, Integer page, String filter, String paramCallback, final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRelatedQuestionsValidateBeforeCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        Type localVarReturnType = new TypeToken<List<QuestionsInner>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListRelatedQuestionsRequestBuilder {
        private final String ids;
        private final String site;
        private String order;
        private String max;
        private String min;
        private String sort;
        private Integer fromdate;
        private Integer todate;
        private Integer pagesize;
        private Integer page;
        private String filter;
        private String paramCallback;

        private ListRelatedQuestionsRequestBuilder(String ids, String site) {
            this.ids = ids;
            this.site = site;
        }

        /**
         * Set order
         * @param order  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set max
         * @param max sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; rank &#x3D;&gt; none  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder max(String max) {
            this.max = max;
            return this;
        }
        
        /**
         * Set min
         * @param min sort &#x3D; activity &#x3D;&gt; date sort &#x3D; creation &#x3D;&gt; date sort &#x3D; votes &#x3D;&gt; number sort &#x3D; rank &#x3D;&gt; none  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder min(String min) {
            this.min = min;
            return this;
        }
        
        /**
         * Set sort
         * @param sort  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set fromdate
         * @param fromdate Unix date. (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder fromdate(Integer fromdate) {
            this.fromdate = fromdate;
            return this;
        }
        
        /**
         * Set todate
         * @param todate Unix date. (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder todate(Integer todate) {
            this.todate = todate;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set filter
         * @param filter #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user&#39;s badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \&quot;bake in\&quot; any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \&quot;safe\&quot; filter is mearly an \&quot;unsafe\&quot; one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \&quot;safe\&quot; data is the only accessible data it will be returned even in \&quot;unsafe\&quot; filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder filter(String filter) {
            this.filter = filter;
            return this;
        }
        
        /**
         * Set paramCallback
         * @param paramCallback All API responses are JSON, we do support JSONP with the callback query parameter.  (optional)
         * @return ListRelatedQuestionsRequestBuilder
         */
        public ListRelatedQuestionsRequestBuilder paramCallback(String paramCallback) {
            this.paramCallback = paramCallback;
            return this;
        }
        
        /**
         * Build call for listRelatedQuestions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listRelatedQuestionsCall(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }


        /**
         * Execute listRelatedQuestions request
         * @return List&lt;QuestionsInner&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public List<QuestionsInner> execute() throws ApiException {
            ApiResponse<List<QuestionsInner>> localVarResp = listRelatedQuestionsWithHttpInfo(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listRelatedQuestions request with HTTP info returned
         * @return ApiResponse&lt;List&lt;QuestionsInner&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<QuestionsInner>> executeWithHttpInfo() throws ApiException {
            return listRelatedQuestionsWithHttpInfo(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback);
        }

        /**
         * Execute listRelatedQuestions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
            <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
            <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
            <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
            <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<QuestionsInner>> _callback) throws ApiException {
            return listRelatedQuestionsAsync(ids, site, order, max, min, sort, fromdate, todate, pagesize, page, filter, paramCallback, _callback);
        }
    }

    /**
     * 
     * Returns questions that the site considers related to those identified in {ids}.   The algorithm for determining if questions are related is not documented, and subject to change at any time. Futhermore, these values are very heavily cached, and may not update immediately after a question has been editted. It is also not guaranteed that a question will be considered related to any number (even non-zero) of questions, and a consumer should be able to handle a variable number of returned questions.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - rank - a priority sort by site applies, subject to change at any time Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.     This method returns a list of questions. 
     * @param ids Number list (semicolon delimited). (required)
     * @param site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \&quot;stackoverflow.com\&quot;), or a short form identified by api_site_parameter on the site object.  (required)
     * @return ListRelatedQuestionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even \&quot;high level\&quot; parameters like key or site.  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.  </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.  </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.  </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.  </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they&#39;re fixed.  </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.  </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.  </td><td>  -  </td></tr>
     </table>
     */
    public ListRelatedQuestionsRequestBuilder listRelatedQuestions(String ids, String site) throws IllegalArgumentException {
        if (ids == null) throw new IllegalArgumentException("\"ids\" is required but got null");
            

        if (site == null) throw new IllegalArgumentException("\"site\" is required but got null");
            

        return new ListRelatedQuestionsRequestBuilder(ids, site);
    }
}
