/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AnswersInnerLastEditor;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CreatedComment
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CreatedComment {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_CAN_FLAG = "can_flag";
  @SerializedName(SERIALIZED_NAME_CAN_FLAG)
  private Boolean canFlag;

  public static final String SERIALIZED_NAME_COMMENT_ID = "comment_id";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  private Integer commentId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_EDITED = "edited";
  @SerializedName(SERIALIZED_NAME_EDITED)
  private Boolean edited;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private AnswersInnerLastEditor owner;

  public static final String SERIALIZED_NAME_POST_ID = "post_id";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private Integer postId;

  public static final String SERIALIZED_NAME_POST_TYPE = "post_type";
  @SerializedName(SERIALIZED_NAME_POST_TYPE)
  private String postType;

  public static final String SERIALIZED_NAME_REPLY_TO_USER = "reply_to_user";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_USER)
  private AnswersInnerLastEditor replyToUser;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_UPVOTED = "upvoted";
  @SerializedName(SERIALIZED_NAME_UPVOTED)
  private Boolean upvoted;

  public CreatedComment() {
  }

  public CreatedComment body(String body) {
    
    
    
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    
    
    
    this.body = body;
  }


  public CreatedComment bodyMarkdown(String bodyMarkdown) {
    
    
    
    
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

   /**
   * Get bodyMarkdown
   * @return bodyMarkdown
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBodyMarkdown() {
    return bodyMarkdown;
  }


  public void setBodyMarkdown(String bodyMarkdown) {
    
    
    
    this.bodyMarkdown = bodyMarkdown;
  }


  public CreatedComment canFlag(Boolean canFlag) {
    
    
    
    
    this.canFlag = canFlag;
    return this;
  }

   /**
   * Get canFlag
   * @return canFlag
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanFlag() {
    return canFlag;
  }


  public void setCanFlag(Boolean canFlag) {
    
    
    
    this.canFlag = canFlag;
  }


  public CreatedComment commentId(Integer commentId) {
    
    
    
    
    this.commentId = commentId;
    return this;
  }

   /**
   * Get commentId
   * @return commentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCommentId() {
    return commentId;
  }


  public void setCommentId(Integer commentId) {
    
    
    
    this.commentId = commentId;
  }


  public CreatedComment creationDate(Integer creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(Integer creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public CreatedComment edited(Boolean edited) {
    
    
    
    
    this.edited = edited;
    return this;
  }

   /**
   * Get edited
   * @return edited
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getEdited() {
    return edited;
  }


  public void setEdited(Boolean edited) {
    
    
    
    this.edited = edited;
  }


  public CreatedComment link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public CreatedComment owner(AnswersInnerLastEditor owner) {
    
    
    
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnswersInnerLastEditor getOwner() {
    return owner;
  }


  public void setOwner(AnswersInnerLastEditor owner) {
    
    
    
    this.owner = owner;
  }


  public CreatedComment postId(Integer postId) {
    
    
    
    
    this.postId = postId;
    return this;
  }

   /**
   * Get postId
   * @return postId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPostId() {
    return postId;
  }


  public void setPostId(Integer postId) {
    
    
    
    this.postId = postId;
  }


  public CreatedComment postType(String postType) {
    
    
    
    
    this.postType = postType;
    return this;
  }

   /**
   * Get postType
   * @return postType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPostType() {
    return postType;
  }


  public void setPostType(String postType) {
    
    
    
    this.postType = postType;
  }


  public CreatedComment replyToUser(AnswersInnerLastEditor replyToUser) {
    
    
    
    
    this.replyToUser = replyToUser;
    return this;
  }

   /**
   * Get replyToUser
   * @return replyToUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnswersInnerLastEditor getReplyToUser() {
    return replyToUser;
  }


  public void setReplyToUser(AnswersInnerLastEditor replyToUser) {
    
    
    
    this.replyToUser = replyToUser;
  }


  public CreatedComment score(Integer score) {
    
    
    
    
    this.score = score;
    return this;
  }

   /**
   * Get score
   * @return score
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getScore() {
    return score;
  }


  public void setScore(Integer score) {
    
    
    
    this.score = score;
  }


  public CreatedComment upvoted(Boolean upvoted) {
    
    
    
    
    this.upvoted = upvoted;
    return this;
  }

   /**
   * Get upvoted
   * @return upvoted
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getUpvoted() {
    return upvoted;
  }


  public void setUpvoted(Boolean upvoted) {
    
    
    
    this.upvoted = upvoted;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CreatedComment instance itself
   */
  public CreatedComment putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatedComment createdComment = (CreatedComment) o;
    return Objects.equals(this.body, createdComment.body) &&
        Objects.equals(this.bodyMarkdown, createdComment.bodyMarkdown) &&
        Objects.equals(this.canFlag, createdComment.canFlag) &&
        Objects.equals(this.commentId, createdComment.commentId) &&
        Objects.equals(this.creationDate, createdComment.creationDate) &&
        Objects.equals(this.edited, createdComment.edited) &&
        Objects.equals(this.link, createdComment.link) &&
        Objects.equals(this.owner, createdComment.owner) &&
        Objects.equals(this.postId, createdComment.postId) &&
        Objects.equals(this.postType, createdComment.postType) &&
        Objects.equals(this.replyToUser, createdComment.replyToUser) &&
        Objects.equals(this.score, createdComment.score) &&
        Objects.equals(this.upvoted, createdComment.upvoted)&&
        Objects.equals(this.additionalProperties, createdComment.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyMarkdown, canFlag, commentId, creationDate, edited, link, owner, postId, postType, replyToUser, score, upvoted, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatedComment {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    canFlag: ").append(toIndentedString(canFlag)).append("\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    edited: ").append(toIndentedString(edited)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    postType: ").append(toIndentedString(postType)).append("\n");
    sb.append("    replyToUser: ").append(toIndentedString(replyToUser)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    upvoted: ").append(toIndentedString(upvoted)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("body_markdown");
    openapiFields.add("can_flag");
    openapiFields.add("comment_id");
    openapiFields.add("creation_date");
    openapiFields.add("edited");
    openapiFields.add("link");
    openapiFields.add("owner");
    openapiFields.add("post_id");
    openapiFields.add("post_type");
    openapiFields.add("reply_to_user");
    openapiFields.add("score");
    openapiFields.add("upvoted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreatedComment
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreatedComment.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatedComment is not found in the empty JSON string", CreatedComment.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_markdown") != null && !jsonObj.get("body_markdown").isJsonNull()) && !jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonObject(jsonObj.getAsJsonObject("owner"));
      }
      if ((jsonObj.get("post_type") != null && !jsonObj.get("post_type").isJsonNull()) && !jsonObj.get("post_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_type").toString()));
      }
      // validate the optional field `reply_to_user`
      if (jsonObj.get("reply_to_user") != null && !jsonObj.get("reply_to_user").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonObject(jsonObj.getAsJsonObject("reply_to_user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatedComment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatedComment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatedComment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatedComment.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatedComment>() {
           @Override
           public void write(JsonWriter out, CreatedComment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatedComment read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CreatedComment instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreatedComment given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreatedComment
  * @throws IOException if the JSON string is invalid with respect to CreatedComment
  */
  public static CreatedComment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatedComment.class);
  }

 /**
  * Convert an instance of CreatedComment to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

