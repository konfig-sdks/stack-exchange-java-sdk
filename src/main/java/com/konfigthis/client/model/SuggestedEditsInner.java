/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AnswersInnerLastEditor;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SuggestedEditsInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SuggestedEditsInner {
  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags = null;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_APPROVAL_DATE = "approval_date";
  @SerializedName(SERIALIZED_NAME_APPROVAL_DATE)
  private Integer approvalDate;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_POST_ID = "post_id";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private Integer postId;

  public static final String SERIALIZED_NAME_POST_TYPE = "post_type";
  @SerializedName(SERIALIZED_NAME_POST_TYPE)
  private String postType;

  public static final String SERIALIZED_NAME_PROPOSING_USER = "proposing_user";
  @SerializedName(SERIALIZED_NAME_PROPOSING_USER)
  private AnswersInnerLastEditor proposingUser;

  public static final String SERIALIZED_NAME_REJECTION_DATE = "rejection_date";
  @SerializedName(SERIALIZED_NAME_REJECTION_DATE)
  private Integer rejectionDate;

  public static final String SERIALIZED_NAME_SUGGESTED_EDIT_ID = "suggested_edit_id";
  @SerializedName(SERIALIZED_NAME_SUGGESTED_EDIT_ID)
  private Integer suggestedEditId;

  public SuggestedEditsInner() {
  }

  public SuggestedEditsInner tags(List<Object> tags) {
    
    
    
    
    this.tags = tags;
    return this;
  }

  public SuggestedEditsInner addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getTags() {
    return tags;
  }


  public void setTags(List<Object> tags) {
    
    
    
    this.tags = tags;
  }


  public SuggestedEditsInner title(String title) {
    
    
    
    
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTitle() {
    return title;
  }


  public void setTitle(String title) {
    
    
    
    this.title = title;
  }


  public SuggestedEditsInner approvalDate(Integer approvalDate) {
    
    
    
    
    this.approvalDate = approvalDate;
    return this;
  }

   /**
   * Get approvalDate
   * @return approvalDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getApprovalDate() {
    return approvalDate;
  }


  public void setApprovalDate(Integer approvalDate) {
    
    
    
    this.approvalDate = approvalDate;
  }


  public SuggestedEditsInner body(String body) {
    
    
    
    
    this.body = body;
    return this;
  }

   /**
   * Get body
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    
    
    
    this.body = body;
  }


  public SuggestedEditsInner comment(String comment) {
    
    
    
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    
    
    
    this.comment = comment;
  }


  public SuggestedEditsInner creationDate(Integer creationDate) {
    
    
    
    
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getCreationDate() {
    return creationDate;
  }


  public void setCreationDate(Integer creationDate) {
    
    
    
    this.creationDate = creationDate;
  }


  public SuggestedEditsInner postId(Integer postId) {
    
    
    
    
    this.postId = postId;
    return this;
  }

   /**
   * Get postId
   * @return postId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPostId() {
    return postId;
  }


  public void setPostId(Integer postId) {
    
    
    
    this.postId = postId;
  }


  public SuggestedEditsInner postType(String postType) {
    
    
    
    
    this.postType = postType;
    return this;
  }

   /**
   * Get postType
   * @return postType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPostType() {
    return postType;
  }


  public void setPostType(String postType) {
    
    
    
    this.postType = postType;
  }


  public SuggestedEditsInner proposingUser(AnswersInnerLastEditor proposingUser) {
    
    
    
    
    this.proposingUser = proposingUser;
    return this;
  }

   /**
   * Get proposingUser
   * @return proposingUser
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AnswersInnerLastEditor getProposingUser() {
    return proposingUser;
  }


  public void setProposingUser(AnswersInnerLastEditor proposingUser) {
    
    
    
    this.proposingUser = proposingUser;
  }


  public SuggestedEditsInner rejectionDate(Integer rejectionDate) {
    
    
    
    
    this.rejectionDate = rejectionDate;
    return this;
  }

   /**
   * Get rejectionDate
   * @return rejectionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getRejectionDate() {
    return rejectionDate;
  }


  public void setRejectionDate(Integer rejectionDate) {
    
    
    
    this.rejectionDate = rejectionDate;
  }


  public SuggestedEditsInner suggestedEditId(Integer suggestedEditId) {
    
    
    
    
    this.suggestedEditId = suggestedEditId;
    return this;
  }

   /**
   * Get suggestedEditId
   * @return suggestedEditId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSuggestedEditId() {
    return suggestedEditId;
  }


  public void setSuggestedEditId(Integer suggestedEditId) {
    
    
    
    this.suggestedEditId = suggestedEditId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SuggestedEditsInner instance itself
   */
  public SuggestedEditsInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuggestedEditsInner suggestedEditsInner = (SuggestedEditsInner) o;
    return Objects.equals(this.tags, suggestedEditsInner.tags) &&
        Objects.equals(this.title, suggestedEditsInner.title) &&
        Objects.equals(this.approvalDate, suggestedEditsInner.approvalDate) &&
        Objects.equals(this.body, suggestedEditsInner.body) &&
        Objects.equals(this.comment, suggestedEditsInner.comment) &&
        Objects.equals(this.creationDate, suggestedEditsInner.creationDate) &&
        Objects.equals(this.postId, suggestedEditsInner.postId) &&
        Objects.equals(this.postType, suggestedEditsInner.postType) &&
        Objects.equals(this.proposingUser, suggestedEditsInner.proposingUser) &&
        Objects.equals(this.rejectionDate, suggestedEditsInner.rejectionDate) &&
        Objects.equals(this.suggestedEditId, suggestedEditsInner.suggestedEditId)&&
        Objects.equals(this.additionalProperties, suggestedEditsInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tags, title, approvalDate, body, comment, creationDate, postId, postType, proposingUser, rejectionDate, suggestedEditId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuggestedEditsInner {\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    approvalDate: ").append(toIndentedString(approvalDate)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    postType: ").append(toIndentedString(postType)).append("\n");
    sb.append("    proposingUser: ").append(toIndentedString(proposingUser)).append("\n");
    sb.append("    rejectionDate: ").append(toIndentedString(rejectionDate)).append("\n");
    sb.append("    suggestedEditId: ").append(toIndentedString(suggestedEditId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("approval_date");
    openapiFields.add("body");
    openapiFields.add("comment");
    openapiFields.add("creation_date");
    openapiFields.add("post_id");
    openapiFields.add("post_type");
    openapiFields.add("proposing_user");
    openapiFields.add("rejection_date");
    openapiFields.add("suggested_edit_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SuggestedEditsInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SuggestedEditsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuggestedEditsInner is not found in the empty JSON string", SuggestedEditsInner.openapiRequiredFields.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("comment") != null && !jsonObj.get("comment").isJsonNull()) && !jsonObj.get("comment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comment").toString()));
      }
      if ((jsonObj.get("post_type") != null && !jsonObj.get("post_type").isJsonNull()) && !jsonObj.get("post_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_type").toString()));
      }
      // validate the optional field `proposing_user`
      if (jsonObj.get("proposing_user") != null && !jsonObj.get("proposing_user").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonObject(jsonObj.getAsJsonObject("proposing_user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuggestedEditsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuggestedEditsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuggestedEditsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuggestedEditsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<SuggestedEditsInner>() {
           @Override
           public void write(JsonWriter out, SuggestedEditsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SuggestedEditsInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SuggestedEditsInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SuggestedEditsInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SuggestedEditsInner
  * @throws IOException if the JSON string is invalid with respect to SuggestedEditsInner
  */
  public static SuggestedEditsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuggestedEditsInner.class);
  }

 /**
  * Convert an instance of SuggestedEditsInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

