openapi: 3.0.0
info:
  description: |
    Stack Exchange is a network of 130+ Q&A communities including Stack Overflow.
  title: StackExchange
  version: "2.0"
  x-apisguru-categories:
  - collaboration
  - developer_tools
  - support
  x-issues:
  - https://github.com/APIs-guru/openapi-directory/issues/699
  - https://github.com/APIs-guru/openapi-directory/issues/217
  x-logo:
    url: http://sstatic.net/stackexchange/img/se-logo.png
  x-origin:
  - version: "3.0"
    format: openapi
    url: https://raw.githubusercontent.com/APIs-guru/unofficial_openapi_specs/master/stackexchange.com/2.0/openapi.yaml
  x-providerName: stackexchange.com
  x-tags:
  - helpWanted
  x-unofficialSpec: true
externalDocs:
  url: https://api.stackexchange.com/
servers:
- url: https://api.stackexchange.com/2.0
tags:
- name: User
- name: Answer
- name: Tag
- name: Question
- name: Badge
- name: Comment
- name: Post
- name: Notification
- name: AccessToken
- name: Message
- name: Reputation
- name: Edit
- name: Error
- name: Filter
- name: Information
- name: Privilege
- name: Query
- name: Event
- name: Associated
- name: Favorite
- name: Mention
- name: Merge
- name: Timeline
- name: Permission
- name: Revision
- name: Search
- name: Site
paths:
  /access-tokens/{accessTokens}:
    get:
      description: "Reads the properties for a set of access tokens.\n \n{accessTokens}\
        \ can contain up to 20 access tokens. These are obtained by authenticating\
        \ a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n"
      operationId: AccessToken_listPropertiesForMultipleTokens
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: accessTokens
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/access_tokens'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - AccessToken
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--access-tokens-accessTokens
      x-accepts: '*/*'
  /access-tokens/{accessTokens}/invalidate:
    get:
      description: "Immediately expires the access tokens passed. This method is meant\
        \ to allow an application to discard any active access tokens it no longer\
        \ needs.\n \n{accessTokens} can contain up to 20 access tokens. These are\
        \ obtained by authenticating a user using OAuth 2.0.\n \nThis method returns\
        \ a list of access_tokens.\n"
      operationId: AccessToken_invalidateList
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: accessTokens
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/access_tokens'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - AccessToken
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--access-tokens-accessTokens-invalidate
      x-accepts: '*/*'
  /answers:
    get:
      description: "Returns all the undeleted answers in the system.\n \nThe sorts\
        \ accepted by this method operate on the follow fields of the answer object:\n\
        \ - activity - last_activity_date\n - creation - creation_date\n - votes -\
        \ score\n  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of answers.\n"
      operationId: Answer_getList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--answers
      x-accepts: '*/*'
  /answers/{ids}:
    get:
      description: "Gets the set of answers identified by ids.\n \nThis is meant for\
        \ batch fetcing of questions. A useful trick to poll for updates is to sort\
        \ by activity, with a minimum date of the last time you polled.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for answer_id on answer objects.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the answer object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n\n\n \nThis method returns a list of answers.\n"
      operationId: Answer_getListByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--answers-ids
      x-accepts: '*/*'
  /answers/{ids}/comments:
    get:
      description: "Gets the comments on a set of answers.\n \nIf you know that you\
        \ have an answer id and need the comments, use this method. If you know you\
        \ have a question id, use /questions/{id}/comments. If you are unsure, use\
        \ /posts/{id}/comments.\n \n{ids} can contain up to 100 semicolon delimited\
        \ ids, to find ids programatically look for answer_id on answer objects.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ comment object:\n - creation - creation_date\n - votes - score\n  creation\
        \ is the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThis method returns\
        \ a list of comments.\n"
      operationId: Answer_getCommentsByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--answers-ids-comments
      x-accepts: '*/*'
  /apps/{accessTokens}/de-authenticate:
    get:
      description: "Passing valid access_tokens to this method causes the application\
        \ that created them to be de-authorized by the user associated with each access_token.\
        \ This will remove the application from their apps tab, and cause all other\
        \ existing access_tokens to be destroyed.\n \nThis method is meant for uninstalling\
        \ applications, recovering from access_token leaks, or simply as a stronger\
        \ form of /access-tokens/{accessTokens}/invalidate.\n \nNothing prevents a\
        \ user from re-authenticate to an application that has de-authenticated itself,\
        \ the user will be prompted to approve the application again however.\n \n\
        {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating\
        \ a user using OAuth 2.0.\n \nThis method returns a list of access_tokens.\n"
      operationId: AccessToken_deauthenticateList
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: accessTokens
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/access_tokens'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - AccessToken
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--apps-accessTokens-de-authenticate
      x-accepts: '*/*'
  /badges:
    get:
      description: "Returns all the badges in the system.\n \nBadge sorts are a tad\
        \ complicated. For the purposes of sorting (and min/max) tag_based is considered\
        \ to be greater than named.\n \nThis means that you can get a list of all\
        \ tag based badges by passing min=tag_based, and conversely all the named\
        \ badges by passing max=named, with sort=type.\n \nFor ranks, bronze is greater\
        \ than silver which is greater than gold. Along with sort=rank, set max=gold\
        \ for just gold badges, max=silver&min=silver for just silver, and min=bronze\
        \ for just bronze.\n \nrank is the default sort.\n \nThis method returns a\
        \ list of badges.\n"
      operationId: Badge_listBadges
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - name
          - type
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--badges
      x-accepts: '*/*'
  /badges/name:
    get:
      description: "Gets all explicitly named badges in the system.\n \nA named badged\
        \ stands in opposition to a tag-based badge. These are referred to as general\
        \ badges on the sites themselves.\n \nFor the rank sort, bronze is greater\
        \ than silver which is greater than gold. Along with sort=rank, set max=gold\
        \ for just gold badges, max=silver&min=silver for just silver, and min=bronze\
        \ for just bronze.\n \nrank is the default sort.\n \nThis method returns a\
        \ list of badges.\n"
      operationId: Badge_getAllNamedBadges
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--badges-name
      x-accepts: '*/*'
  /badges/recipients:
    get:
      description: "Returns recently awarded badges in the system.\n \nAs these badges\
        \ have been awarded, they will have the badge.user property set.\n \nThis\
        \ method returns a list of badges.\n"
      operationId: Badge_getRecentAwardedBadges
      parameters:
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--badges-recipients
      x-accepts: '*/*'
  /badges/tags:
    get:
      description: "Returns the badges that are awarded for participation in specific\
        \ tags.\n \nFor the rank sort, bronze is greater than silver which is greater\
        \ than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver\
        \ for just silver, and min=bronze for just bronze.\n \nrank is the default\
        \ sort.\n \nThis method returns a list of badges.\n"
      operationId: Badge_listTagsBadges
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--badges-tags
      x-accepts: '*/*'
  /badges/{ids}:
    get:
      description: "Gets the badges identified in id.\n \nNote that badge ids are\
        \ not constant across sites, and thus should be looked up via the /badges\
        \ method. A badge id on a single site is, however, guaranteed to be stable.\n\
        \ \nBadge sorts are a tad complicated. For the purposes of sorting (and min/max)\
        \ tag_based is considered to be greater than named.\n \nThis means that you\
        \ can get a list of all tag based badges by passing min=tag_based, and conversely\
        \ all the named badges by passing max=named, with sort=type.\n \nFor ranks,\
        \ bronze is greater than silver which is greater than gold. Along with sort=rank,\
        \ set max=gold for just gold badges, max=silver&min=silver for just silver,\
        \ and min=bronze for just bronze.\n \nrank is the default sort.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for badge_id on badge objects.\n \nThis method returns a list of badges.\n"
      operationId: Badge_getBadgesByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - name
          - type
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--badges-ids
      x-accepts: '*/*'
  /badges/{ids}/recipients:
    get:
      description: "Returns recently awarded badges in the system, constrained to\
        \ a certain set of badges.\n \nAs these badges have been awarded, they will\
        \ have the badge.user property set.\n \n{ids} can contain up to 100 semicolon\
        \ delimited ids, to find ids programatically look for badge_id on badge objects.\n\
        \ \nThis method returns a list of badges.\n"
      operationId: Badge_getRecentAwardedRecipients
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--badges-ids-recipients
      x-accepts: '*/*'
  /comments:
    get:
      description: "Gets all the comments on the site.\n \nIf you're filtering for\
        \ interesting comments (by score, creation date, etc.) make use of the sort\
        \ paramter with appropriate min and max values.\n \nIf you're looking to query\
        \ conversations between users, instead use the /users/{ids}/mentioned and\
        \ /users/{ids}/comments/{toid} methods.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the comment object:\n - creation - creation_date\n\
        \ - votes - score\n  creation is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of comments.\n"
      operationId: Comment_listComments
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--comments
      x-accepts: '*/*'
  /comments/{ids}:
    get:
      description: "Gets the comments identified in id.\n \nThis method is most useful\
        \ if you have a cache of comment ids obtained through other means (such as\
        \ /questions/{id}/comments) but suspect the data may be stale.\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for comment_id on comment objects.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the comment object:\n - creation - creation_date\n\
        \ - votes - score\n  creation is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of comments.\n"
      operationId: Comment_getCommentsByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--comments-ids
      x-accepts: '*/*'
  /comments/{id}/delete:
    post:
      description: "Deletes a comment.\n \nUse an access_token with write_access to\
        \ delete a comment.\n \nIn practice, this method will never return an object.\n"
      operationId: Comment_deleteAction
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: preview
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--comments-id-delete
      x-accepts: application/json
  /comments/{id}/edit:
    post:
      description: "Edit an existing comment.\n \nUse an access_token with write_access\
        \ to edit an existing comment.\n \nThis method return the created comment.\n"
      operationId: Comment_editExisting
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: body
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: preview
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/created_comment'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--comments-id-edit
      x-accepts: '*/*'
  /errors:
    get:
      description: "Returns the various error codes that can be produced by the API.\n\
        \ \nThis method is provided for discovery, documentation, and testing purposes,\
        \ it is not expected many applications will consume it during normal operation.\n\
        \ \nFor testing purposes, look into the /errors/{id} method which simulates\
        \ errors given a code.\n \nThis method returns a list of errors.\n"
      operationId: Error_listErrors
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/errors'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Error
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--errors
      x-accepts: '*/*'
  /errors/{id}:
    get:
      description: "This method allows you to generate an error.\n \nThis method is\
        \ only intended for use when testing an application or library. Unlike other\
        \ methods in the API, its contract is not frozen, and new error codes may\
        \ be added at any time.\n \nThis method results in an error, which will be\
        \ expressed with a 400 HTTP status code and setting the error* properties\
        \ on the wrapper object.\n"
      operationId: Error_generateError
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/error'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Error
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--errors-id
      x-accepts: '*/*'
  /events:
    get:
      description: "Returns a stream of events that have occurred on the site.\n \n\
        The API considers the following \"events\":\n - posting a question\n - posting\
        \ an answer\n - posting a comment\n - editing a post\n - creating a user\n\
        \n\n  \n\n\n \nEvents are only accessible for 15 minutes after they occurred,\
        \ and by default only events in the last 5 minutes are returned. You can specify\
        \ the age of the oldest event returned by setting the since parameter.\n \n\
        It is advised that developers batch events by ids and make as few subsequent\
        \ requests to other methods as possible.\n \nThis method returns a list of\
        \ events.\n"
      operationId: Event_listEvents
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/events'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Event
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--events
      x-accepts: '*/*'
  /filters/create:
    get:
      description: "Creates a new filter given a list of includes, excludes, a base\
        \ filter, and whether or not this filter should be \"unsafe\".\n \nFilter\
        \ \"safety\" is defined as follows. Any string returned as a result of an\
        \ API call with a safe filter will be inline-able into HTML without script-injection\
        \ concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping,\
        \ etc.) will be necessary on returned strings. Applications that wish to handle\
        \ sanitizing themselves should create an unsafe filter. All filters are safe\
        \ by default, under the assumption that double-encoding bugs are more desirable\
        \ than script injections.\n \nIf no base filter is specified, the default\
        \ filter is assumed. When building a filter from scratch, the none built-in\
        \ filter is useful.\n \nWhen the size of the parameters being sent to this\
        \ method grows to large, problems can occur. This method will accept POST\
        \ requests to mitigate this.\n \nIt is not expected that many applications\
        \ will call this method at runtime, filters should be pre-calculated and \"\
        baked in\" in the common cases. Furthermore, there are a number of built-in\
        \ filters which cover common use cases.\n \nThis method returns a single filter.\n"
      operationId: Filter_createFilter
      parameters:
      - explode: true
        in: query
        name: base
        required: false
        schema:
          type: string
        style: form
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: exclude
        required: false
        schema:
          type: string
        style: form
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: include
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: unsafe
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/single_filter'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Filter
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--filters-create
      x-accepts: '*/*'
  /filters/{filters}:
    get:
      description: "Returns the fields included by the given filters, and the \"safeness\"\
        \ of those filters.\n \nIt is not expected that this method will be consumed\
        \ by many applications at runtime, it is provided to aid in debugging.\n \n\
        {filters} can contain up to 20 semicolon delimited filters. Filters are obtained\
        \ via calls to /filters/create, or by using a built-in filter.\n \nThis method\
        \ returns a list of filters.\n"
      operationId: Filter_getFilterDetailsByIds
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: filters
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/filters'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Filter
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--filters-filters
      x-accepts: '*/*'
  /inbox:
    get:
      description: "Returns a user's inbox.\n \nThis method requires an access_token,\
        \ with a scope containing \"read_inbox\".\n \nThis method returns a list of\
        \ inbox items.\n"
      operationId: Message_listInboxItems
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inbox_items'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Message
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--inbox
      x-accepts: '*/*'
  /inbox/unread:
    get:
      description: "Returns the unread items in a user's inbox.\n \nThis method requires\
        \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
        \ returns a list of inbox items.\n"
      operationId: Message_getUnreadItems
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inbox_items'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Message
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--inbox-unread
      x-accepts: '*/*'
  /info:
    get:
      description: "Returns a collection of statistics about the site.\n \nData to\
        \ facilitate per-site customization, discover related sites, and aggregate\
        \ statistics is all returned by this method.\n \nThis data is cached very\
        \ aggressively, by design. Query sparingly, ideally no more than once an hour.\n\
        \ \nThis method returns an info object.\n"
      operationId: Information_getStatistics
      parameters:
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/info_object'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Information
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--info
      x-accepts: '*/*'
  /me:
    get:
      description: "Returns the user associated with the passed access_token.\n \n\
        This method returns a user.\n"
      operationId: User_getUser
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/user'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me
      x-accepts: '*/*'
  /me/answers:
    get:
      description: "Returns the answers owned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of answers.\n"
      operationId: Answer_getUserAnswersList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-answers
      x-accepts: '*/*'
  /me/associated:
    get:
      description: "Returns all of a user's associated accounts, given an access_token\
        \ for them.\n \nThis method returns a list of network users.\n"
      operationId: Associated_getUserAccounts
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/network_users'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Associated
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-associated
      x-accepts: '*/*'
  /me/badges:
    get:
      description: "Returns the badges earned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of badges.\n"
      operationId: Badge_getUserBadges
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - name
          - type
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Badge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-badges
      x-accepts: '*/*'
  /me/comments:
    get:
      description: "Returns the comments owned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of comments.\n"
      operationId: Comment_listOwnedComments
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-comments
      x-accepts: '*/*'
  /me/comments/{toId}:
    get:
      description: "Returns the comments owned by the user associated with the given\
        \ access_token that are in reply to the user identified by {toId}.\n \nThis\
        \ method returns a list of comments.\n"
      operationId: Comment_getReplyList
      parameters:
      - explode: false
        in: path
        name: toId
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-comments-toId
      x-accepts: '*/*'
  /me/favorites:
    get:
      description: "Returns the questions favorites by the user associated with the\
        \ given access_token.\n \nThis method returns a list of questions.\n"
      operationId: Favorite_getUserFavorites
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = added => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = added => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - added
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Favorite
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-favorites
      x-accepts: '*/*'
  /me/inbox:
    get:
      description: "Returns the user identified by access_token's inbox.\n \nThis\
        \ method requires an access_token, with a scope containing \"read_inbox\"\
        .\n \nThis method returns a list of inbox items.\n"
      operationId: Message_getInboxItems
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inbox_items'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Message
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-inbox
      x-accepts: '*/*'
  /me/inbox/unread:
    get:
      description: "Returns the unread items in the user identified by access_token's\
        \ inbox.\n \nThis method requires an access_token, with a scope containing\
        \ \"read_inbox\".\n \nThis method returns a list of inbox items.\n"
      operationId: Notification_getUnreadItemsInInbox
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inbox_items'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Notification
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-inbox-unread
      x-accepts: '*/*'
  /me/mentioned:
    get:
      description: "Returns the comments mentioning the user associated with the given\
        \ access_token.\n \nThis method returns a list of comments.\n"
      operationId: Mention_userCommentsList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Mention
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-mentioned
      x-accepts: '*/*'
  /me/merges:
    get:
      description: "Returns a record of merges that have occurred involving a user\
        \ identified by an access_token.\n \nThis method allows you to take now invalid\
        \ account ids and find what account they've become, or take currently valid\
        \ account ids and find which ids were equivalent in the past.\n \nThis is\
        \ most useful when confirming that an account_id is in fact \"new\" to an\
        \ application.\n \nAccount merges can happen for a wide range of reasons,\
        \ applications should not make assumptions that merges have particular causes.\n\
        \ \nNote that accounts are managed at a network level, users on a site may\
        \ be merged due to an account level merge but there is no guarantee that a\
        \ merge has an effect on any particular site.\n \nThis method returns a list\
        \ of account_merge.\n"
      operationId: Merge_getAccountMergeList
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/account_merge'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Merge
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-merges
      x-accepts: '*/*'
  /me/notifications:
    get:
      description: "Returns a user's notifications, given an access_token.\n \nThis\
        \ method requires an access_token, with a scope containing \"read_inbox\"\
        .\n \nThis method returns a list of notifications.\n"
      operationId: Notification_getUserNotificationsList
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notifications'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Notification
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-notifications
      x-accepts: '*/*'
  /me/notifications/unread:
    get:
      description: "Returns a user's unread notifications, given an access_token.\n\
        \ \nThis method requires an access_token, with a scope containing \"read_inbox\"\
        .\n \nThis method returns a list of notifications.\n"
      operationId: Notification_getUnreadItemsInInbox
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notifications'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Notification
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-notifications-unread
      x-accepts: '*/*'
  /me/privileges:
    get:
      description: "Returns the privileges the user identified by access_token has.\n\
        \ \nThis method returns a list of privileges.\n"
      operationId: Privilege_getUserPrivileges
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/privileges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Privilege
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-privileges
      x-accepts: '*/*'
  /me/questions:
    get:
      description: "Returns the questions owned by the user associated with the given\
        \ access_token.\n \nThis method returns a list of questions.\n"
      operationId: Question_getUserQuestionsList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-questions
      x-accepts: '*/*'
  /me/questions/featured:
    get:
      description: "Returns the questions that have active bounties offered by the\
        \ user associated with the given access_token.\n \nThis method returns a list\
        \ of questions.\n"
      operationId: Question_getUserFeatured
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-questions-featured
      x-accepts: '*/*'
  /me/questions/no-answers:
    get:
      description: "Returns the questions owned by the user associated with the given\
        \ access_token that have no answers.\n \nThis method returns a list of questions.\n"
      operationId: Answer_listNoAnswerQuestions
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-questions-no-answers
      x-accepts: '*/*'
  /me/questions/unaccepted:
    get:
      description: "Returns the questions owned by the user associated with the given\
        \ access_token that have no accepted answer.\n \nThis method returns a list\
        \ of questions.\n"
      operationId: Question_getUnacceptedList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-questions-unaccepted
      x-accepts: '*/*'
  /me/questions/unanswered:
    get:
      description: "Returns the questions owned by the user associated with the given\
        \ access_token that are not considered answered.\n \nThis method returns a\
        \ list of questions.\n"
      operationId: Answer_userUnansweredQuestionsGet
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-questions-unanswered
      x-accepts: '*/*'
  /me/reputation:
    get:
      description: "Returns the reputation changed for the user associated with the\
        \ given access_token.\n \nThis method returns a list of reputation changes.\n"
      operationId: Reputation_getUserReputationChanges
      parameters:
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reputation_changes'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Reputation
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-reputation
      x-accepts: '*/*'
  /me/reputation-history:
    get:
      description: "Returns user's public reputation history.\n \nThis method returns\
        \ a list of reputation_history.\n"
      operationId: Reputation_getUserReputationHistory
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reputation_history'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Reputation
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-reputation-history
      x-accepts: '*/*'
  /me/reputation-history/full:
    get:
      description: "Returns user's full reputation history, including private events.\n\
        \ \n This method requires an access_token, with a scope containing \"private_info\"\
        .\n\n\n \nThis method returns a list of reputation_history.\n"
      operationId: Reputation_getFullHistory
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reputation_history'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Reputation
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-reputation-history-full
      x-accepts: '*/*'
  /me/suggested-edits:
    get:
      description: "Returns the suggested edits the user identified by access_token\
        \ has submitted.\n \nThis method returns a list of suggested-edits.\n"
      operationId: Edit_getUserSuggestedEdits
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - approval
          - rejection
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/suggested-edits'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Edit
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-suggested-edits
      x-accepts: '*/*'
  /me/tags:
    get:
      description: "Returns the tags the user identified by the access_token passed\
        \ is active in.\n \nThis method returns a list of tags.\n"
      operationId: Tag_getUserTagsList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - popular
          - activity
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-tags
      x-accepts: '*/*'
  /me/tags/{tags}/top-answers:
    get:
      description: "Returns the top 30 answers the user associated with the given\
        \ access_token has posted in response to questions with the given tags.\n\
        \ \nThis method returns a list of answers.\n"
      operationId: Answer_getUserTopAnswers
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-tags-tags-top-answers
      x-accepts: '*/*'
  /me/tags/{tags}/top-questions:
    get:
      description: "Returns the top 30 questions the user associated with the given\
        \ access_token has posted in response to questions with the given tags.\n\
        \ \nThis method returns a list of questions.\n"
      operationId: Tag_getUserTopQuestions
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = hot => none
          sort = week => none
          sort = month => none
          sort = relevance => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = hot => none
          sort = week => none
          sort = month => none
          sort = relevance => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - hot
          - week
          - month
          - relevance
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-tags-tags-top-questions
      x-accepts: '*/*'
  /me/timeline:
    get:
      description: "Returns a subset of the actions the user identified by the passed\
        \ access_token has taken on the site.\n \nThis method returns a list of user\
        \ timeline objects.\n"
      operationId: Timeline_getUserTimeline
      parameters:
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/user_timeline_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Timeline
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-timeline
      x-accepts: '*/*'
  /me/top-answer-tags:
    get:
      description: "Returns the user identified by access_token's top 30 tags by answer\
        \ score.\n \nThis method returns a list of top tag objects.\n"
      operationId: Answer_getUserTopTags
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/top_tag_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-top-answer-tags
      x-accepts: '*/*'
  /me/top-question-tags:
    get:
      description: "Returns the user identified by access_token's top 30 tags by question\
        \ score.\n \nThis method returns a list of top tag objects.\n"
      operationId: Tag_getUserTopTagsList
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/top_tag_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-top-question-tags
      x-accepts: '*/*'
  /me/write-permissions:
    get:
      description: "Returns the write permissions a user has via the api, given an\
        \ access token.\n \nThe Stack Exchange API gives users the ability to create,\
        \ edit, and delete certain types. This method returns whether the passed user\
        \ is capable of performing those actions at all, as well as how many times\
        \ a day they can.\n \nThis method does not consider the user's current quota\
        \ (ie. if they've already exhausted it for today) nor any additional restrictions\
        \ on write access, such as editing deleted comments.\n \nThis method returns\
        \ a list of write_permissions.\n"
      operationId: Permission_getUserWritePermissions
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/write_permissions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Permission
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--me-write-permissions
      x-accepts: '*/*'
  /notifications:
    get:
      description: "Returns a user's notifications.\n \nThis method requires an access_token,\
        \ with a scope containing \"read_inbox\".\n \nThis method returns a list of\
        \ notifications.\n"
      operationId: Notification_getUserNotifications
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notifications'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Notification
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--notifications
      x-accepts: '*/*'
  /notifications/unread:
    get:
      description: "Returns a user's unread notifications.\n \nThis method requires\
        \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
        \ returns a list of notifications.\n"
      operationId: Notification_getUserUnreadNotifications
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notifications'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Notification
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--notifications-unread
      x-accepts: '*/*'
  /posts:
    get:
      description: "Fetches all posts (questions and answers) on the site.\n \nIn\
        \ many ways this method is the union of /questions and /answers, returning\
        \ both sets of data albeit only the common fields.\n \nMost applications should\
        \ use the question or answer specific methods, but /posts is available for\
        \ those rare cases where any activity is of intereset. Examples of such queries\
        \ would be: \"all posts on Jan. 1st 2011\" or \"top 10 posts by score of all\
        \ time\".\n \nThe sorts accepted by this method operate on the follow fields\
        \ of the post object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of posts.\n"
      operationId: Post_getAllPosts
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/posts'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Post
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--posts
      x-accepts: '*/*'
  /posts/{ids}:
    get:
      description: "Fetches a set of posts by ids.\n \nThis method is meant for grabbing\
        \ an object when unsure whether an id identifies a question or an answer.\
        \ This is most common with user entered data.\n \n{ids} can contain up to\
        \ 100 semicolon delimited ids, to find ids programatically look for post_id,\
        \ answer_id, or question_id on post, answer, and question objects respectively.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ post object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of posts.\n"
      operationId: Post_getPostsByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/posts'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Post
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--posts-ids
      x-accepts: '*/*'
  /posts/{ids}/comments:
    get:
      description: "Gets the comments on the posts identified in ids, regardless of\
        \ the type of the posts.\n \nThis method is meant for cases when you are unsure\
        \ of the type of the post id provided. Generally, this would be due to obtaining\
        \ the post id directly from a user.\n \n{ids} can contain up to 100 semicolon\
        \ delimited ids, to find ids programatically look for post_id, answer_id,\
        \ or question_id on post, answer, and question objects respectively.\n \n\
        The sorts accepted by this method operate on the follow fields of the comment\
        \ object:\n - creation - creation_date\n - votes - score\n  creation is the\
        \ default sort.\n \n It is possible to create moderately complex queries using\
        \ sort, min, max, fromdate, and todate.\n\n\n \nThis method returns a list\
        \ of comments.\n"
      operationId: Post_commentsByIdsGet
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Post
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--posts-ids-comments
      x-accepts: '*/*'
  /posts/{ids}/revisions:
    get:
      description: "Returns edit revisions for the posts identified in ids.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for post_id, answer_id, or question_id on post, answer, and question\
        \ objects respectively.\n \nThis method returns a list of revisions.\n"
      operationId: Post_getPostRevisionsByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/revisions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Post
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--posts-ids-revisions
      x-accepts: '*/*'
  /posts/{ids}/suggested-edits:
    get:
      description: "Returns suggsted edits on the posts identified in ids.\n \n -\
        \ creation - creation_date\n - approval - approval_date\n - rejection - rejection_date\n\
        \  creation is the default sort.\n \n {ids} can contain up to 100 semicolon\
        \ delimited ids, to find ids programatically look for post_id, answer_id,\
        \ or question_id on post, answer, and question objects respectively.\n\n\n\
        \ \nThis method returns a list of suggested-edits.\n"
      operationId: Post_listSuggestedEdits
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - approval
          - rejection
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/suggested-edits'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Post
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--posts-ids-suggested-edits
      x-accepts: '*/*'
  /posts/{id}/comments/add:
    post:
      description: "Create a new comment.\n \nUse an access_token with write_access\
        \ to create a new comment on a post.\n \nThis method returns the created comment.\n"
      operationId: Post_addComment
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: body
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: preview
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/created_comment'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Post
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-post--posts-id-comments-add
      x-accepts: '*/*'
  /privileges:
    get:
      description: "Returns the earnable privileges on a site.\n \nPrivileges define\
        \ abilities a user can earn (via reputation) on any Stack Exchange site.\n\
        \ \nWhile fairly stable, over time they do change. New ones are introduced\
        \ with new features, and the reputation requirements change as a site matures.\n\
        \ \nThis method returns a list of privileges.\n"
      operationId: Privilege_getEarnableList
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/privileges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Privilege
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--privileges
      x-accepts: '*/*'
  /questions:
    get:
      description: "Gets all the questions on the site.\n \nThis method allows you\
        \ make fairly flexible queries across the entire corpus of questions on a\
        \ site. For example, getting all questions asked in the the week of Jan 1st\
        \ 2011 with scores of 10 or more is a single query with parameters sort=votes&min=10&fromdate=1293840000&todate=1294444800.\n\
        \ \nTo constrain questions returned to those with a set of tags, use the tagged\
        \ parameter with a semi-colon delimited list of tags. This is an and contraint,\
        \ passing tagged=c;java will return only those questions with both tags. As\
        \ such, passing more than 5 tags will always return zero results.\n \nThe\
        \ sorts accepted by this method operate on the follow fields of the question\
        \ object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n - hot - by the formula ordering the hot tab Does not accept\
        \ min or max\n - week - by the formula ordering the week tab Does not accept\
        \ min or max\n - month - by the formula ordering the month tab Does not accept\
        \ min or max\n  activity is the default sort.\n \n It is possible to create\
        \ moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of questions.\n"
      operationId: Question_getAllQuestions
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = hot => none
          sort = week => none
          sort = month => none
          sort = relevance => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = hot => none
          sort = week => none
          sort = month => none
          sort = relevance => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - hot
          - week
          - month
          - relevance
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions
      x-accepts: '*/*'
  /questions/featured:
    get:
      description: "Returns all the questions with active bounties in the system.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ question object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of questions.\n"
      operationId: Question_listFeaturedQuestions
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-featured
      x-accepts: '*/*'
  /questions/no-answers:
    get:
      description: "Returns questions which have received no answers.\n \nCompare\
        \ with /questions/unanswered which mearly returns questions that the sites\
        \ consider insufficiently well answered.\n \nThis method corresponds roughly\
        \ with the this site tab.\n \nTo constrain questions returned to those with\
        \ a set of tags, use the tagged parameter with a semi-colon delimited list\
        \ of tags. This is an and contraint, passing tagged=c;java will return only\
        \ those questions with both tags. As such, passing more than 5 tags will always\
        \ return zero results.\n \nThe sorts accepted by this method operate on the\
        \ follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n\n\n \nThis method returns a list of questions.\n"
      operationId: Answer_listNoAnswerQuestions
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-no-answers
      x-accepts: '*/*'
  /questions/unanswered:
    get:
      description: "Returns questions the site considers to be unanswered.\n \nNote\
        \ that just because a question has an answer, that does not mean it is considered\
        \ answered. While the rules are subject to change, at this time a question\
        \ must have at least one upvoted answer to be considered answered.\n \nTo\
        \ constrain questions returned to those with a set of tags, use the tagged\
        \ parameter with a semi-colon delimited list of tags. This is an and contraint,\
        \ passing tagged=c;java will return only those questions with both tags. As\
        \ such, passing more than 5 tags will always return zero results.\n \nCompare\
        \ with /questions/no-answers.\n \nThis method corresponds roughly with the\
        \ unanswered tab.\n \nThe sorts accepted by this method operate on the follow\
        \ fields of the question object:\n - activity - last_activity_date\n - creation\
        \ - creation_date\n - votes - score\n  activity is the default sort.\n \n\
        \ It is possible to create moderately complex queries using sort, min, max,\
        \ fromdate, and todate.\n\n\n \nThis method returns a list of questions.\n"
      operationId: Answer_getListOfUnansweredQuestions
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-unanswered
      x-accepts: '*/*'
  /questions/{ids}:
    get:
      description: "Returns the questions identified in {ids}.\n \nThis is most useful\
        \ for fetching fresh data when maintaining a cache of question ids, or polling\
        \ for changes.\n \n{ids} can contain up to 100 semicolon delimited ids, to\
        \ find ids programatically look for question_id on question objects.\n \n\
        The sorts accepted by this method operate on the follow fields of the question\
        \ object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of questions.\n"
      operationId: Question_getByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-ids
      x-accepts: '*/*'
  /questions/{ids}/answers:
    get:
      description: "Gets the answers to a set of questions identified in id.\n \n\
        This method is most useful if you have a set of interesting questions, and\
        \ you wish to obtain all of their answers at once or if you are polling for\
        \ new or updates answers (in conjunction with sort=activity).\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for question_id on question objects.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the answer object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n\n\n \nThis method returns a list of answers.\n"
      operationId: Answer_getListByQuestionIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-ids-answers
      x-accepts: '*/*'
  /questions/{ids}/comments:
    get:
      description: "Gets the comments on a question.\n \nIf you know that you have\
        \ an question id and need the comments, use this method. If you know you have\
        \ a answer id, use /answers/{ids}/comments. If you are unsure, use /posts/{ids}/comments.\n\
        \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for question_id on question objects.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the comment object:\n - creation\
        \ - creation_date\n - votes - score\n  creation is the default sort.\n \n\
        \ It is possible to create moderately complex queries using sort, min, max,\
        \ fromdate, and todate.\n\n\n \nThis method returns a list of comments.\n"
      operationId: Comment_getCommentsList
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Comment
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-ids-comments
      x-accepts: '*/*'
  /questions/{ids}/linked:
    get:
      description: "Gets questions which link to those questions identified in {ids}.\n\
        \ \nThis method only considers questions that are linked within a site, and\
        \ will never return questions from another Stack Exchange site.\n \nA question\
        \ is considered \"linked\" when it explicitly includes a hyperlink to another\
        \ question, there are no other heuristics.\n \n{ids} can contain up to 100\
        \ semicolon delimited ids, to find ids programatically look for question_id\
        \ on question objects.\n \nThe sorts accepted by this method operate on the\
        \ follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n - rank - a priority sort\
        \ by site applies, subject to change at any time Does not accept min or max\n\
        \  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of questions.\n"
      operationId: Question_getLinkedQuestions
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = rank => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = rank => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - rank
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-ids-linked
      x-accepts: '*/*'
  /questions/{ids}/related:
    get:
      description: "Returns questions that the site considers related to those identified\
        \ in {ids}.\n \nThe algorithm for determining if questions are related is\
        \ not documented, and subject to change at any time. Futhermore, these values\
        \ are very heavily cached, and may not update immediately after a question\
        \ has been editted. It is also not guaranteed that a question will be considered\
        \ related to any number (even non-zero) of questions, and a consumer should\
        \ be able to handle a variable number of returned questions.\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for question_id on question objects.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n - rank - a priority sort\
        \ by site applies, subject to change at any time Does not accept min or max\n\
        \  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of questions.\n"
      operationId: Question_listRelatedQuestions
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = rank => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = rank => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - rank
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-ids-related
      x-accepts: '*/*'
  /questions/{ids}/timeline:
    get:
      description: "Returns a subset of the events that have happened to the questions\
        \ identified in id.\n \nThis provides data similar to that found on a question's\
        \ timeline page.\n \nVoting data is scrubbed to deter inferencing of voter\
        \ identity.\n \n{ids} can contain up to 100 semicolon delimited ids, to find\
        \ ids programatically look for question_id on question objects.\n \nThis method\
        \ returns a list of question timeline events.\n"
      operationId: Question_getTimelineEvents
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/question_timeline_events'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Question
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--questions-ids-timeline
      x-accepts: '*/*'
  /revisions/{ids}:
    get:
      description: "Returns edit revisions identified by ids in {ids}.\n \n{ids} can\
        \ contain up to 20 semicolon delimited ids, to find ids programatically look\
        \ for revision_guid on revision objects. Note that unlike most other id types\
        \ in the API, revision_guid is a string.\n \nThis method returns a list of\
        \ revisions.\n"
      operationId: Revision_listRevisionsByIds
      parameters:
      - description: Guid list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/revisions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Revision
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--revisions-ids
      x-accepts: '*/*'
  /search:
    get:
      description: "Searches a site for any questions which fit the given criteria.\n\
        \ \nThis method is intentionally quite limited. For more general searching,\
        \ you should use a proper internet search engine restricted to the domain\
        \ of the site in question.\n \nAt least one of tagged or intitle must be set\
        \ on this method. nottagged is only used if tagged is also set, for performance\
        \ reasons.\n \ntagged and nottagged are semi-colon delimited list of tags.\
        \ At least 1 tag in tagged will be on each returned question if it is passed,\
        \ making it the OR equivalent of the AND version of tagged on /questions.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ question object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n - relevance - matches the relevance tab on the site itself\
        \ Does not accept min or max\n  activity is the default sort.\n \n It is possible\
        \ to create moderately complex queries using sort, min, max, fromdate, and\
        \ todate.\n\n\n \nThis method returns a list of questions.\n"
      operationId: Query_siteQuestionsSearch
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - relevance
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: intitle
        required: false
        schema:
          type: string
        style: form
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: nottagged
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Query
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--search
      x-accepts: '*/*'
  /search/advanced:
    get:
      description: "Searches a site for any questions which fit the given criteria.\n\
        \ \nSearch criteria are expressed using the following parameters:\n  - q -\
        \ a free form text parameter, will match all question properties based on\
        \ an undocumented algorithm.\n - accepted - true to return only questions\
        \ with accepted answers, false to return only those without. Omit to elide\
        \ constraint.\n - answers - the minimum number of answers returned questions\
        \ must have.\n - body - text which must appear in returned questions' bodies.\n\
        \ - closed - true to return only closed questions, false to return only open\
        \ ones. Omit to elide constraint.\n - migrated - true to return only questions\
        \ migrated away from a site, false to return only those not. Omit to elide\
        \ constraint.\n - notice - true to return only questions with post notices,\
        \ false to return only those without. Omit to elide constraint.\n - nottagged\
        \ - a semicolon delimited list of tags, none of which will be present on returned\
        \ questions.\n - tagged - a semicolon delimited list of tags, of which at\
        \ least one will be present on all returned questions.\n - title - text which\
        \ must appear in returned questions' titles.\n - user - the id of the user\
        \ who must own the questions returned.\n - url - a url which must be contained\
        \ in a post, may include a wildcard.\n - views - the minimum number of views\
        \ returned questions must have.\n - wiki - true to return only community wiki\
        \ questions, false to return only non-community wiki ones. Omit to elide constraint.\n\
        \n\n  \nAt least one additional parameter must be set if nottagged is set,\
        \ for performance reasons.\n \nThe sorts accepted by this method operate on\
        \ the follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n - relevance - matches the\
        \ relevance tab on the site itself Does not accept min or max\n  activity\
        \ is the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThis method returns\
        \ a list of questions.\n"
      operationId: Search_siteQuestionsAdvancedSearch
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - relevance
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: accepted
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - explode: true
        in: query
        name: answers
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: body
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: closed
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - explode: true
        in: query
        name: migrated
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - explode: true
        in: query
        name: notice
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: nottagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: q
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: url
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: user
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: views
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: wiki
        required: false
        schema:
          enum:
          - "true"
          - "false"
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Search
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--search-advanced
      x-accepts: '*/*'
  /similar:
    get:
      description: "Returns questions which are similar to a hypothetical one based\
        \ on a title and tag combination.\n \nThis method is roughly equivalent to\
        \ a site's related questions suggestion on the ask page.\n \nThis method is\
        \ useful for correlating data outside of a Stack Exchange site with similar\
        \ content within one.\n \nNote that title must always be passed as a parameter.\
        \ tagged and nottagged are optional, semi-colon delimited lists of tags.\n\
        \ \nIf tagged is passed it is treated as a preference, there is no guarantee\
        \ that questions returned will have any of those tags. nottagged is treated\
        \ as a requirement, no questions will be returned with those tags.\n \nThe\
        \ sorts accepted by this method operate on the follow fields of the question\
        \ object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n - relevance - order by \"how similar\" the questions are,\
        \ most likely candidate first with a descending order Does not accept min\
        \ or max\n  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of questions.\n"
      operationId: Query_similarQuestionsSearch
      parameters:
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: tagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = relevance => none
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - relevance
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - description: String list (semicolon delimited).
        explode: true
        in: query
        name: nottagged
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: title
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Query
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--similar
      x-accepts: '*/*'
  /sites:
    get:
      description: "Returns all sites in the network.\n \nThis method allows for discovery\
        \ of new sites, and changes to existing ones. Be aware that unlike normal\
        \ API methods, this method should be fetched very infrequently, it is very\
        \ unusual for these values to change more than once on any given day. It is\
        \ suggested that you cache its return for at least one day, unless your app\
        \ encounters evidence that it has changed (such as from the /info method).\n\
        \ \nThe pagesize parameter for this method is unbounded, in acknowledgement\
        \ that for many applications repeatedly fetching from /sites would complicate\
        \ start-up tasks needlessly.\n \nThis method returns a list of sites.\n"
      operationId: Site_listSites
      parameters:
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/sites'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Site
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--sites
      x-accepts: '*/*'
  /suggested-edits:
    get:
      description: "Returns all the suggested edits in the systems.\n \nThis method\
        \ returns a list of suggested-edits.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the suggested_edit object:\n - creation\
        \ - creation_date\n - approval - approval_date Does not return unapproved\
        \ suggested_edits\n - rejection - rejection_date Does not return unrejected\
        \ suggested_edits\n  creation is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n"
      operationId: Edit_listSuggestedEdits
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - approval
          - rejection
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/suggested-edits'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Edit
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--suggested-edits
      x-accepts: '*/*'
  /suggested-edits/{ids}:
    get:
      description: "Returns suggested edits identified in ids.\n \n{ids} can contain\
        \ up to 100 semicolon delimited ids, to find ids programatically look for\
        \ suggested_edit_id on suggested_edit objects.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the suggested_edit object:\n - creation\
        \ - creation_date\n - approval - approval_date Does not return unapproved\
        \ suggested_edits\n - rejection - rejection_date Does not return unrejected\
        \ suggested_edits\n  creation is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of suggested-edits.\n"
      operationId: Edit_listSuggestedEdits
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - approval
          - rejection
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/suggested-edits'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Edit
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--suggested-edits-ids
      x-accepts: '*/*'
  /tags:
    get:
      description: "Returns the tags found on a site.\n \nThe inname parameter lets\
        \ a consumer filter down to tags that contain a certain substring. For example,\
        \ inname=own would return both \"download\" and \"owner\" amongst others.\n\
        \ \nThis method returns a list of tags.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the tag object:\n - popular - count\n -\
        \ activity - the creation_date of the last question asked with the tag\n -\
        \ name - name\n  popular is the default sort.\n \n It is possible to create\
        \ moderately complex queries using sort, min, max, fromdate, and todate.\n"
      operationId: Information_getTagsList
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - popular
          - activity
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Information
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags
      x-accepts: '*/*'
  /tags/moderator-only:
    get:
      description: "Returns the tags found on a site that only moderators can use.\n\
        \ \nThe inname parameter lets a consumer filter down to tags that contain\
        \ a certain substring. For example, inname=own would return both \"download\"\
        \ and \"owner\" amongst others.\n \nThis method returns a list of tags.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ tag object:\n - popular - count\n - activity - the creation_date of the\
        \ last question asked with the tag\n - name - name\n  popular is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n"
      operationId: Tag_getModeratorOnlyTagsList
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - popular
          - activity
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-moderator-only
      x-accepts: '*/*'
  /tags/required:
    get:
      description: "Returns the tags found on a site that fulfill required tag constraints\
        \ on questions.\n \nThe inname parameter lets a consumer filter down to tags\
        \ that contain a certain substring. For example, inname=own would return both\
        \ \"download\" and \"owner\" amongst others.\n \nThis method returns a list\
        \ of tags.\n \nThe sorts accepted by this method operate on the follow fields\
        \ of the tag object:\n - popular - count\n - activity - the creation_date\
        \ of the last question asked with the tag\n - name - name\n  popular is the\
        \ default sort.\n \n It is possible to create moderately complex queries using\
        \ sort, min, max, fromdate, and todate.\n"
      operationId: Tag_listRequiredTags
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - popular
          - activity
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-required
      x-accepts: '*/*'
  /tags/synonyms:
    get:
      description: "Returns all tag synonyms found a site.\n \nWhen searching for\
        \ synonyms of specific tags, it is better to use /tags/{tags}/synonyms over\
        \ this method.\n \nThe sorts accepted by this method operate on the follow\
        \ fields of the tag_synonym object:\n - creation - creation_date\n - applied\
        \ - applied_count\n - activity - last_applied_date\n  creation is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n\n\n \nThis method returns a list of tag_synonyms.\n"
      operationId: Tag_synonymsList
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = applied => number
          sort = activity => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = applied => number
          sort = activity => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - applied
          - activity
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tag_synonyms'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-synonyms
      x-accepts: '*/*'
  /tags/{tags}/faq:
    get:
      description: "Returns the frequently asked questions for the given set of tags\
        \ in {tags}.\n \nFor a question to be returned, it must have all the tags\
        \ in {tags} and be considered \"frequently asked\". The exact algorithm for\
        \ determining whether a question is considered a FAQ is subject to change\
        \ at any time.\n \n{tags} can contain up to 5 individual tags per request.\n\
        \ \nThis method returns a list of questions.\n"
      operationId: Tag_getFaqQuestions
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tags-faq
      x-accepts: '*/*'
  /tags/{tags}/info:
    get:
      description: "Returns tag objects representing the tags in {tags} found on the\
        \ site.\n \nThis method diverges from the standard naming patterns to avoid\
        \ to conflicting with existing methods, due to the free form nature of tag\
        \ names.\n \nThis method returns a list of tags.\n \nThe sorts accepted by\
        \ this method operate on the follow fields of the tag object:\n - popular\
        \ - count\n - activity - the creation_date of the last question asked with\
        \ the tag\n - name - name\n  popular is the default sort.\n \n It is possible\
        \ to create moderately complex queries using sort, min, max, fromdate, and\
        \ todate.\n"
      operationId: Tag_getTagInfo
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - popular
          - activity
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tags-info
      x-accepts: '*/*'
  /tags/{tags}/related:
    get:
      description: "Returns the tags that are most related to those in {tags}.\n \n\
        Including multiple tags in {tags} is equivalent to asking for \"tags related\
        \ to tag #1 and tag #2\" not \"tags related to tag #1 or tag #2\".\n \ncount\
        \ on tag objects returned is the number of question with that tag that also\
        \ share all those in {tags}.\n \n{tags} can contain up to 4 individual tags\
        \ per request.\n \nThis method returns a list of tags.\n"
      operationId: Tag_getRelatedTags
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tags-related
      x-accepts: '*/*'
  /tags/{tags}/synonyms:
    get:
      description: "Gets all the synonyms that point to the tags identified in {tags}.\
        \ If you're looking to discover all the tag synonyms on a site, use the /tags/synonyms\
        \ methods instead of call this method on all tags.\n \n{tags} can contain\
        \ up to 20 individual tags per request.\n \nThe sorts accepted by this method\
        \ operate on the follow fields of the tag_synonym object:\n - creation - creation_date\n\
        \ - applied - applied_count\n - activity - last_applied_date\n  creation is\
        \ the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThis method returns\
        \ a list of tag synonyms.\n"
      operationId: Tag_listSynonyms
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = applied => number
          sort = activity => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = applied => number
          sort = activity => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - applied
          - activity
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tag_synonyms'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tags-synonyms
      x-accepts: '*/*'
  /tags/{tags}/wikis:
    get:
      description: "Returns the wikis that go with the given set of tags in {tags}.\n\
        \ \nBe aware that not all tags have wikis.\n \n{tags} can contain up to 20\
        \ individual tags per request.\n \nThis method returns a list of tag wikis.\n"
      operationId: Tag_getTagWikis
      parameters:
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tag_wikis'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tags-wikis
      x-accepts: '*/*'
  /tags/{tag}/top-answerers/{period}:
    get:
      description: "Returns the top 30 answerers active in a single tag, of either\
        \ all-time or the last 30 days.\n \nThis is a view onto the data presented\
        \ on the tag info page on the sites.\n \nThis method returns a list of tag\
        \ score objects.\n"
      operationId: Answer_tagTopAnswerers
      parameters:
      - explode: false
        in: path
        name: tag
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: period
        required: true
        schema:
          enum:
          - all_time
          - month
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tag_score_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Answer
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tag-top-answerers-period
      x-accepts: '*/*'
  /tags/{tag}/top-askers/{period}:
    get:
      description: "Returns the top 30 askers active in a single tag, of either all-time\
        \ or the last 30 days.\n \nThis is a view onto the data presented on the tag\
        \ info page on the sites.\n \nThis method returns a list of tag score objects.\n"
      operationId: Tag_getTopAskersByPeriod
      parameters:
      - explode: false
        in: path
        name: tag
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: period
        required: true
        schema:
          enum:
          - all_time
          - month
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tag_score_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - Tag
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--tags-tag-top-askers-period
      x-accepts: '*/*'
  /users:
    get:
      description: "Returns all users on a site.\n \nThis method returns a list of\
        \ users.\n \nThe sorts accepted by this method operate on the follow fields\
        \ of the user object:\n - reputation - reputation\n - creation - creation_date\n\
        \ - name - display_name\n - modified - last_modified_date\n  reputation is\
        \ the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThe inname parameter\
        \ lets consumers filter the results down to just those users with a certain\
        \ substring in their display name. For example, inname=kevin will return all\
        \ users with both users named simply \"Kevin\" or those with Kevin as one\
        \ of (or part of) their names; such as \"Kevin Montrose\".\n"
      operationId: User_listUsers
      parameters:
      - explode: true
        in: query
        name: inname
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/users'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users
      x-accepts: '*/*'
  /users/moderators:
    get:
      description: "Gets those users on a site who can exercise moderation powers.\n\
        \ \nNote, employees of Stack Exchange Inc. will be returned if they have been\
        \ granted moderation powers on a site even if they have never been appointed\
        \ or elected explicitly. This method checks abilities, not the manner in which\
        \ they were obtained.\n \nThe sorts accepted by this method operate on the\
        \ follow fields of the user object:\n - reputation - reputation\n - creation\
        \ - creation_date\n - name - display_name\n - modified - last_modified_date\n\
        \  reputation is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of users.\n"
      operationId: User_listModeratorUsers
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/users'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-moderators
      x-accepts: '*/*'
  /users/moderators/elected:
    get:
      description: "Returns those users on a site who both have moderator powers,\
        \ and were actually elected.\n \nThis method excludes Stack Exchange Inc.\
        \ employees, unless they were actually elected moderators on a site (which\
        \ can only have happened prior to their employment).\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the user object:\n - reputation\
        \ - reputation\n - creation - creation_date\n - name - display_name\n - modified\
        \ - last_modified_date\n  reputation is the default sort.\n \n It is possible\
        \ to create moderately complex queries using sort, min, max, fromdate, and\
        \ todate.\n\n\n \nThis method returns a list of users.\n"
      operationId: User_listElectedModeratorUsers
      parameters:
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/users'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-moderators-elected
      x-accepts: '*/*'
  /users/{ids}:
    get:
      description: "Gets the users identified in ids in {ids}.\n \nTypically this\
        \ method will be called to fetch user profiles when you have obtained user\
        \ ids from some other source, such as /questions.\n \n{ids} can contain up\
        \ to 100 semicolon delimited ids, to find ids programatically look for user_id\
        \ on user or shallow_user objects.\n \nThe sorts accepted by this method operate\
        \ on the follow fields of the user object:\n - reputation - reputation\n -\
        \ creation - creation_date\n - name - display_name\n - modified - last_modified_date\n\
        \  reputation is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of users.\n"
      operationId: User_getUserProfilesByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = reputation => number
          sort = creation => date
          sort = name => string
          sort = modified => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/users'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids
      x-accepts: '*/*'
  /users/{ids}/answers:
    get:
      description: "Returns the answers the users in {ids} have posted.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the answer object:\n - activity\
        \ - last_activity_date\n - creation - creation_date\n - votes - score\n  activity\
        \ is the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThis method returns\
        \ a list of answers.\n"
      operationId: User_getUserAnswersList
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-answers
      x-accepts: '*/*'
  /users/{ids}/associated:
    get:
      description: "Returns all of a user's associated accounts, given their account_ids\
        \ in {ids}.\n \n{ids} can contain up to 100 semicolon delimited ids, to find\
        \ ids programatically look for account_id on user objects.\n \nThis method\
        \ returns a list of network_users.\n"
      operationId: User_getAssociatedAccounts
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/network_users'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-associated
      x-accepts: '*/*'
  /users/{ids}/badges:
    get:
      description: "Get the badges the users in {ids} have earned.\n \nBadge sorts\
        \ are a tad complicated. For the purposes of sorting (and min/max) tag_based\
        \ is considered to be greater than named.\n \nThis means that you can get\
        \ a list of all tag based badges a user has by passing min=tag_based, and\
        \ conversely all the named badges by passing max=named, with sort=type.\n\
        \ \nFor ranks, bronze is greater than silver which is greater than gold. Along\
        \ with sort=rank, set max=gold for just gold badges, max=silver&min=silver\
        \ for just silver, and min=bronze for just bronze.\n \nrank is the default\
        \ sort.\n \n{ids} can contain up to 100 semicolon delimited ids, to find ids\
        \ programatically look for user_id on user or shallow_user objects.\n \nThis\
        \ method returns a list of badges.\n"
      operationId: User_listUserBadges
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
          sort = awarded => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = rank => string
          sort = name => string
          sort = type => string
          sort = awarded => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - rank
          - name
          - type
          - awarded
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/badges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-badges
      x-accepts: '*/*'
  /users/{ids}/comments:
    get:
      description: "Get the comments posted by users in {ids}.\n \n{ids} can contain\
        \ up to 100 semicolon delimited ids, to find ids programatically look for\
        \ user_id on user or shallow_user objects.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the comment object:\n - creation\
        \ - creation_date\n - votes - score\n  creation is the default sort.\n \n\
        \ It is possible to create moderately complex queries using sort, min, max,\
        \ fromdate, and todate.\n\n\n \nThis method returns a list of comments.\n"
      operationId: User_getCommentsByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-comments
      x-accepts: '*/*'
  /users/{ids}/comments/{toid}:
    get:
      description: "Get the comments that the users in {ids} have posted in reply\
        \ to the single user identified in {toid}.\n \nThis method is useful for extracting\
        \ conversations, especially over time or across multiple posts.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects. {toid} can contain only\
        \ 1 id, found in the same manner as those in {ids}.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the comment object:\n - creation\
        \ - creation_date\n - votes - score\n  creation is the default sort.\n \n\
        \ It is possible to create moderately complex queries using sort, min, max,\
        \ fromdate, and todate.\n\n\n \nThis method returns a list of comments.\n"
      operationId: User_getUserCommentsByIdsAndToid
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: toid
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-comments-toid
      x-accepts: '*/*'
  /users/{ids}/favorites:
    get:
      description: "Get the questions that users in {ids} have favorited.\n \nThis\
        \ method is effectively a view onto a user's favorites tab.\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for user_id on user or shallow_user objects.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the question object:\n - activity\
        \ - last_activity_date\n - creation - creation_date\n - votes - score\n -\
        \ added - when the user favorited the question\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n\n\n \nThis method returns a list of questions.\n"
      operationId: User_getFavoritesList
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = added => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
          sort = added => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          - added
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-favorites
      x-accepts: '*/*'
  /users/{ids}/mentioned:
    get:
      description: "Gets all the comments that the users in {ids} were mentioned in.\n\
        \ \nNote, to count as a mention the comment must be considered to be \"in\
        \ reply to\" a user. Most importantly, this means that a comment can only\
        \ be in reply to a single user.\n \n{ids} can contain up to 100 semicolon\
        \ delimited ids, to find ids programatically look for user_id on user or shallow_user\
        \ objects.\n \nThe sorts accepted by this method operate on the follow fields\
        \ of the comment object:\n - creation - creation_date\n - votes - score\n\
        \  It is possible to create moderately complex queries using sort, min, max,\
        \ fromdate, and todate.\n\n\n \nThis method returns a list of comments.\n"
      operationId: User_mentionedCommentsList
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/comments'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-mentioned
      x-accepts: '*/*'
  /users/{ids}/merges:
    get:
      description: "Returns a record of merges that have occurred involving the passed\
        \ account ids.\n \nThis method allows you to take now invalid account ids\
        \ and find what account they've become, or take currently valid account ids\
        \ and find which ids were equivalent in the past.\n \nThis is most useful\
        \ when confirming that an account_id is in fact \"new\" to an application.\n\
        \ \nAccount merges can happen for a wide range of reasons, applications should\
        \ not make assumptions that merges have particular causes.\n \nNote that accounts\
        \ are managed at a network level, users on a site may be merged due to an\
        \ account level merge but there is no guarantee that a merge has an effect\
        \ on any particular site.\n \nThis method returns a list of account_merge.\n"
      operationId: User_listAccountMerges
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/account_merge'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-merges
      x-accepts: '*/*'
  /users/{ids}/questions:
    get:
      description: "Gets the questions asked by the users in {ids}.\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for user_id on user or shallow_user objects.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the question object:\n - activity\
        \ - last_activity_date\n - creation - creation_date\n - votes - score\n  activity\
        \ is the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThis method returns\
        \ a list of questions.\n"
      operationId: User_getQuestionsByUserIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-questions
      x-accepts: '*/*'
  /users/{ids}/questions/featured:
    get:
      description: "Gets the questions on which the users in {ids} have active bounties.\n\
        \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the question object:\n -\
        \ activity - last_activity_date\n - creation - creation_date\n - votes - score\n\
        \  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of questions.\n"
      operationId: User_getFeaturedQuestions
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-questions-featured
      x-accepts: '*/*'
  /users/{ids}/questions/no-answers:
    get:
      description: "Gets the questions asked by the users in {ids} which have no answers.\n\
        \ \nQuestions returns by this method actually have zero undeleted answers.\
        \ It is completely disjoint /users/{ids}/questions/unanswered and /users/{ids}/questions/unaccepted,\
        \ which only return questions with at least one answer, subject to other contraints.\n\
        \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the question object:\n -\
        \ activity - last_activity_date\n - creation - creation_date\n - votes - score\n\
        \  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of questions.\n"
      operationId: User_listNoAnswerQuestions
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-questions-no-answers
      x-accepts: '*/*'
  /users/{ids}/questions/unaccepted:
    get:
      description: "Gets the questions asked by the users in {ids} which have at least\
        \ one answer, but no accepted answer.\n \nQuestions returned by this method\
        \ have answers, but the owner has not opted to accept any of them.\n \n{ids}\
        \ can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the question object:\n -\
        \ activity - last_activity_date\n - creation - creation_date\n - votes - score\n\
        \  activity is the default sort.\n \n It is possible to create moderately\
        \ complex queries using sort, min, max, fromdate, and todate.\n\n\n \nThis\
        \ method returns a list of questions.\n"
      operationId: User_getUnacceptedQuestions
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-questions-unaccepted
      x-accepts: '*/*'
  /users/{ids}/questions/unanswered:
    get:
      description: "Gets the questions asked by the users in {ids} which the site\
        \ consideres unanswered, while still having at least one answer posted.\n\
        \ \nThese rules are subject to change, but currently any question without\
        \ at least one upvoted or accepted answer is considered unanswered.\n \nTo\
        \ get the set of questions that a user probably considers unanswered, the\
        \ returned questions should be unioned with those returned by /users/{id}/questions/no-answers.\
        \ These methods are distinct so that truly unanswered (that is, zero posted\
        \ answers) questions can be easily separated from mearly poorly or inadequately\
        \ answered ones.\n \n{ids} can contain up to 100 semicolon delimited ids,\
        \ to find ids programatically look for user_id on user or shallow_user objects.\n\
        \ \nThe sorts accepted by this method operate on the follow fields of the\
        \ question object:\n - activity - last_activity_date\n - creation - creation_date\n\
        \ - votes - score\n  activity is the default sort.\n \n It is possible to\
        \ create moderately complex queries using sort, min, max, fromdate, and todate.\n\
        \n\n \nThis method returns a list of questions.\n"
      operationId: User_getUnansweredQuestions
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-questions-unanswered
      x-accepts: '*/*'
  /users/{ids}/reputation:
    get:
      description: "Gets a subset of the reputation changes for users in {ids}.\n\
        \ \nReputation changes are intentionally scrubbed of some data to make it\
        \ difficult to correlate votes on particular posts with user reputation changes.\
        \ That being said, this method returns enough data for reasonable display\
        \ of reputation trends.\n \n{ids} can contain up to 100 semicolon delimited\
        \ ids, to find ids programatically look for user_id on user or shallow_user\
        \ objects.\n \nThis method returns a list of reputation objects.\n"
      operationId: User_getReputationChanges
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reputation_changes'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-reputation
      x-accepts: '*/*'
  /users/{ids}/reputation-history:
    get:
      description: "Returns users' public reputation history.\n \nThis method returns\
        \ a list of reputation_history.\n"
      operationId: User_getReputationHistory
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reputation_history'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-reputation-history
      x-accepts: '*/*'
  /users/{ids}/suggested-edits:
    get:
      description: "Returns the suggested edits a users in {ids} have submitted.\n\
        \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the suggested_edit object:\n\
        \ - creation - creation_date\n - approval - approval_date Does not return\
        \ unapproved suggested_edits\n - rejection - rejection_date Does not return\
        \ unrejected suggested_edits\n  creation is the default sort.\n \n It is possible\
        \ to create moderately complex queries using sort, min, max, fromdate, and\
        \ todate.\n\n\n \nThis method returns a list of suggested-edits.\n"
      operationId: User_getSuggestedEditsByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = creation => date
          sort = approval => date
          sort = rejection => date
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - creation
          - approval
          - rejection
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/suggested-edits'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-suggested-edits
      x-accepts: '*/*'
  /users/{ids}/tags:
    get:
      description: "Returns the tags the users identified in {ids} have been active\
        \ in.\n \nThis route corresponds roughly to user's stats tab, but does not\
        \ include tag scores. A subset of tag scores are available (on a single user\
        \ basis) in /users/{id}/top-answer-tags and /users/{id}/top-question-tags.\n\
        \ \n{ids} can contain up to 100 semicolon delimited ids, to find ids programatically\
        \ look for user_id on user or shallow_user objects.\n \nThe sorts accepted\
        \ by this method operate on the follow fields of the tag object:\n - popular\
        \ - count\n - activity - the creation_date of the last question asked with\
        \ the tag\n - name - name\n  popular is the default sort.\n \n It is possible\
        \ to create moderately complex queries using sort, min, max, fromdate, and\
        \ todate.\n\n\n \nThis method returns a list of tags.\n"
      operationId: User_getTags
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = popular => number
          sort = activity => date
          sort = name => string
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - popular
          - activity
          - name
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/tags'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-tags
      x-accepts: '*/*'
  /users/{ids}/timeline:
    get:
      description: "Returns a subset of the actions the users in {ids} have taken\
        \ on the site.\n \nThis method returns users' posts, edits, and earned badges\
        \ in the order they were accomplished. It is possible to filter to just a\
        \ window of activity using the fromdate and todate parameters.\n \n{ids} can\
        \ contain up to 100 semicolon delimited ids, to find ids programatically look\
        \ for user_id on user or shallow_user objects.\n \nThis method returns a list\
        \ of user timeline objects.\n"
      operationId: User_getUserTimelineByIds
      parameters:
      - description: Number list (semicolon delimited).
        explode: false
        in: path
        name: ids
        required: true
        schema:
          type: string
        style: simple
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/user_timeline_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-ids-timeline
      x-accepts: '*/*'
  /users/{id}/inbox:
    get:
      description: "Returns a user's inbox.\n \nThis method requires an access_token,\
        \ with a scope containing \"read_inbox\".\n \nThis method is effectively an\
        \ alias for /inbox. It is provided for consumers who make strong assumptions\
        \ about operating within the context of a single site rather than the Stack\
        \ Exchange network as a whole.\n \n{id} can contain a single id, to find it\
        \ programatically look for user_id on user or shallow_user objects.\n \nThis\
        \ method returns a list of inbox items.\n"
      operationId: User_getInboxItems
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inbox_items'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-inbox
      x-accepts: '*/*'
  /users/{id}/inbox/unread:
    get:
      description: "Returns the unread items in a user's inbox.\n \nThis method requires\
        \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
        \ is effectively an alias for /inbox/unread. It is provided for consumers\
        \ who make strong assumptions about operating within the context of a single\
        \ site rather than the Stack Exchange network as a whole.\n \n{id} can contain\
        \ a single id, to find it programatically look for user_id on user or shallow_user\
        \ objects.\n \nThis method returns a list of inbox items.\n"
      operationId: User_getInboxUnread
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: since
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/inbox_items'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-inbox-unread
      x-accepts: '*/*'
  /users/{id}/notifications:
    get:
      description: "Returns a user's notifications.\n \nThis method requires an access_token,\
        \ with a scope containing \"read_inbox\".\n \nThis method returns a list of\
        \ notifications.\n"
      operationId: User_getNotificationsList
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notifications'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-notifications
      x-accepts: '*/*'
  /users/{id}/notifications/unread:
    get:
      description: "Returns a user's unread notifications.\n \nThis method requires\
        \ an access_token, with a scope containing \"read_inbox\".\n \nThis method\
        \ returns a list of notifications.\n"
      operationId: User_getUnreadNotifications
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/notifications'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-notifications-unread
      x-accepts: '*/*'
  /users/{id}/privileges:
    get:
      description: "Returns the privileges a user has.\n \nApplications are encouraged\
        \ to calculate privileges themselves, without repeated queries to this method.\
        \ A simple check against the results returned by /privileges and user.user_type\
        \ would be sufficient.\n \n{id} can contain only a single, to find it programatically\
        \ look for user_id on user or shallow_user objects.\n \nThis method returns\
        \ a list of privileges.\n"
      operationId: User_getPrivilegesList
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/privileges'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-privileges
      x-accepts: '*/*'
  /users/{id}/reputation-history/full:
    get:
      description: "Returns a user's full reputation history, including private events.\n\
        \ \nThis method requires an access_token, with a scope containing \"private_info\"\
        .\n \nThis method returns a list of reputation_history.\n"
      operationId: User_getFullReputationHistory
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/reputation_history'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-reputation-history-full
      x-accepts: '*/*'
  /users/{id}/tags/{tags}/top-answers:
    get:
      description: "Returns the top 30 answers a user has posted in response to questions\
        \ with the given tags.\n \n{id} can contain a single id, to find it programatically\
        \ look for user_id on user or shallow_user objects. {tags} is limited to 5\
        \ tags, passing more will result in an error.\n \nThe sorts accepted by this\
        \ method operate on the follow fields of the answer object:\n - activity -\
        \ last_activity_date\n - creation - creation_date\n - votes - score\n  activity\
        \ is the default sort.\n \n It is possible to create moderately complex queries\
        \ using sort, min, max, fromdate, and todate.\n\n\n \nThis method returns\
        \ a list of answers.\n"
      operationId: User_getUserTopAnswers
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/answers'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-tags-tags-top-answers
      x-accepts: '*/*'
  /users/{id}/tags/{tags}/top-questions:
    get:
      description: "Returns the top 30 questions a user has asked with the given tags.\n\
        \ \n{id} can contain a single id, to find it programatically look for user_id\
        \ on user or shallow_user objects. {tags} is limited to 5 tags, passing more\
        \ will result in an error.\n \nThe sorts accepted by this method operate on\
        \ the follow fields of the question object:\n - activity - last_activity_date\n\
        \ - creation - creation_date\n - votes - score\n  activity is the default\
        \ sort.\n \n It is possible to create moderately complex queries using sort,\
        \ min, max, fromdate, and todate.\n\n\n \nThis method returns a list of questions.\n"
      operationId: User_getTopQuestionsByTags
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - description: String list (semicolon delimited).
        explode: false
        in: path
        name: tags
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: order
        required: false
        schema:
          enum:
          - desc
          - asc
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: max
        required: false
        schema:
          type: string
        style: form
      - description: |
          sort = activity => date
          sort = creation => date
          sort = votes => number
        explode: true
        in: query
        name: min
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - activity
          - creation
          - votes
          type: string
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: fromdate
        required: false
        schema:
          type: integer
        style: form
      - description: Unix date.
        explode: true
        in: query
        name: todate
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/questions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-tags-tags-top-questions
      x-accepts: '*/*'
  /users/{id}/top-answer-tags:
    get:
      description: "Returns a single user's top tags by answer score.\n \nThis a subset\
        \ of the data returned on a user's tags tab.\n \n{id} can contain a single\
        \ id, to find it programatically look for user_id on user or shallow_user\
        \ objects.\n \nThis method returns a list of top_tag objects.\n"
      operationId: User_getUserTopAnswerTags
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/top_tag_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-top-answer-tags
      x-accepts: '*/*'
  /users/{id}/top-question-tags:
    get:
      description: "Returns a single user's top tags by question score.\n \nThis a\
        \ subset of the data returned on a user's tags tab.\n \n{id} can contain a\
        \ single id, to find it programatically look for user_id on user or shallow_user\
        \ objects.\n \nThis method returns a list of top_tag objects.\n"
      operationId: User_getTopQuestionTags
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/top_tag_objects'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-top-question-tags
      x-accepts: '*/*'
  /users/{id}/write-permissions:
    get:
      description: "Returns the write permissions a user has via the api.\n \nThe\
        \ Stack Exchange API gives users the ability to create, edit, and delete certain\
        \ types. This method returns whether the passed user is capable of performing\
        \ those actions at all, as well as how many times a day they can.\n \nThis\
        \ method does not consider the user's current quota (ie. if they've already\
        \ exhausted it for today) nor any additional restrictions on write access,\
        \ such as editing deleted comments.\n \nThis method returns a list of write_permissions.\n"
      operationId: User_getWritePermissions
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: integer
        style: simple
      - explode: true
        in: query
        name: pagesize
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: page
        required: false
        schema:
          type: integer
        style: form
      - description: |
          #Discussion

          The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.

          An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.

          Filters are immutable and non-expiring. An application can safely "bake in" any filters that are created, it is not necessary (or advisable) to create filters at runtime.

          The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).

          #Safety

          Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.

          Note that this does not mean that "safe" filter is mearly an "unsafe" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).

          When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the "safe" data is the only accessible data it will be returned even in "unsafe" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.

          #Built In Filters

          The following filters are built in:

          default, each type documents which fields are returned under the default filter (for example, answers).
          withbody, which is default plus the *.body fields
          none, which is empty
          total, which includes just .total

          #Compatibility with V1.x

          For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters.
        explode: true
        in: query
        name: filter
        required: false
        schema:
          type: string
        style: form
      - description: |
          All API responses are JSON, we do support JSONP with the callback query parameter.
        explode: true
        in: query
        name: callback
        required: false
        schema:
          type: string
        style: form
      - description: |
          Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. "stackoverflow.com"), or a short form identified by api_site_parameter on the site object.
        explode: true
        in: query
        name: site
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/write_permissions'
          description: OK
        "400":
          description: |
            bad_parameter Ã¢â‚¬â€œ 400 An invalid parameter was passed, this includes even "high level" parameters like key or site.
        "401":
          description: |
            access_token_required Ã¢â‚¬â€œ 401 A method that requires an access token (obtained via authentication) was called without one.
        "402":
          description: |
            invalid_access_token Ã¢â‚¬â€œ 402 An invalid access token was passed to a method.
        "403":
          description: |
            access_denied Ã¢â‚¬â€œ 403 A method which requires certain permissions was called with an access token that lacks those permissions.
        "404":
          description: |
            no_method Ã¢â‚¬â€œ 404 An attempt was made to call a method that does not exist. Note, calling methods that expect numeric ids (like /users/{ids}) with non-numeric ids can also result in this error.
        "405":
          description: |
            key_required Ã¢â‚¬â€œ 405 A method was called in a manner that requires an application key (generally, with an access token), but no key was passed.
        "406":
          description: |
            access_token_compromised Ã¢â‚¬â€œ 406 An access token is no longer believed to be secure, normally because it was used on a non-HTTPS call. The access token will be invalidated if this error is returned.
        "500":
          description: |
            internal_error Ã¢â‚¬â€œ 500 An unexpected error occurred in the API. It has been logged, and Stack Exchange developers have been notified. You should report these errors on Stack Apps if you want to be notified when they're fixed.
        "502":
          description: |
            throttle_violation Ã¢â‚¬â€œ 502 An application has violated part of the rate limiting contract, so the request was terminated.
        "503":
          description: |
            temporarily_unavailable Ã¢â‚¬â€œ 503 Some or all of the API is unavailable. Applications should backoff on requests to the method invoked.
      tags:
      - User
      x-konfig-operation-can-have-single-parameter: true
      x-konfig-single-parameter-schema: konfig-generated-schema-single-parameter-schema-get--users-id-write-permissions
      x-accepts: '*/*'
components:
  schemas:
    tags:
      items:
        $ref: '#/components/schemas/tags_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    access_tokens:
      items:
        $ref: '#/components/schemas/access_tokens_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    account_merge:
      items:
        $ref: '#/components/schemas/account_merge_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    answers:
      items:
        $ref: '#/components/schemas/answers_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    badges:
      items:
        $ref: '#/components/schemas/badges_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    comments:
      items:
        $ref: '#/components/schemas/comments_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    created_comment:
      example:
        owner:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        edited: true
        link: link
        can_flag: true
        creation_date: 6
        body: body
        comment_id: 0
        score: 5
        body_markdown: body_markdown
        post_id: 1
        reply_to_user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        upvoted: true
        post_type: post_type
      properties:
        body:
          type: string
        body_markdown:
          type: string
        can_flag:
          type: boolean
        comment_id:
          type: integer
        creation_date:
          type: integer
        edited:
          type: boolean
        link:
          type: string
        owner:
          $ref: '#/components/schemas/answers_inner_last_editor'
        post_id:
          type: integer
        post_type:
          type: string
        reply_to_user:
          $ref: '#/components/schemas/answers_inner_last_editor'
        score:
          type: integer
        upvoted:
          type: boolean
      type: object
      x-konfig-is-used-in-successful-response: true
    error:
      example:
        error_message: error_message
        error_name: error_name
        error_id: 0.8008281904610115
      properties:
        error_id:
          type: number
        error_message:
          type: string
        error_name:
          type: string
      type: object
      x-konfig-is-used-in-successful-response: true
    errors:
      items:
        $ref: '#/components/schemas/errors_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    events:
      items:
        $ref: '#/components/schemas/events_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    filters:
      items:
        $ref: '#/components/schemas/filters_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    inbox_items:
      items:
        $ref: '#/components/schemas/inbox_items_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    info_object:
      example:
        answers_per_minute: 0.8008281904610115
        total_comments: 9
        total_badges: 7
        total_accepted: 5
        badges_per_minute: 6.027456183070403
        questions_per_minute: 5.962133916683182
        site:
          icon_url: icon_url
          audience: audience
          aliases:
          - ""
          - ""
          favicon_url: favicon_url
          site_type: site_type
          logo_url: logo_url
          api_site_parameter: api_site_parameter
          open_beta_date: 7
          site_state: site_state
          related_sites:
          - ""
          - ""
          closed_beta_date: 5
          markdown_extensions:
          - ""
          - ""
          site_url: site_url
          styling:
            tag_background_color: tag_background_color
            link_color: link_color
            tag_foreground_color: tag_foreground_color
          name: name
          high_resolution_icon_url: high_resolution_icon_url
          twitter_account: twitter_account
          launch_date: 2
        total_unanswered: 2
        total_votes: 7
        total_questions: 3
        api_revision: api_revision
        new_active_users: 1
        total_answers: 2
        total_users: 4
      properties:
        answers_per_minute:
          type: number
        api_revision:
          type: string
        badges_per_minute:
          type: number
        new_active_users:
          type: integer
        questions_per_minute:
          type: number
        site:
          $ref: '#/components/schemas/inbox_items_inner_site'
        total_accepted:
          type: integer
        total_answers:
          type: integer
        total_badges:
          type: integer
        total_comments:
          type: integer
        total_questions:
          type: integer
        total_unanswered:
          type: integer
        total_users:
          type: integer
        total_votes:
          type: integer
      type: object
      x-konfig-is-used-in-successful-response: true
    network_users:
      items:
        $ref: '#/components/schemas/network_users_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    notifications:
      items:
        $ref: '#/components/schemas/notifications_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    posts:
      items:
        $ref: '#/components/schemas/posts_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    privileges:
      items:
        $ref: '#/components/schemas/privileges_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    question_timeline_events:
      items:
        $ref: '#/components/schemas/question_timeline_events_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    questions:
      items:
        $ref: '#/components/schemas/questions_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    reputation_changes:
      items:
        $ref: '#/components/schemas/reputation_changes_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    reputation_history:
      items:
        $ref: '#/components/schemas/reputation_history_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    reputation_objects:
      items:
        $ref: '#/components/schemas/reputation_changes_inner'
      type: array
    revisions:
      items:
        $ref: '#/components/schemas/revisions_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    single_filter:
      example:
        filter: filter
        filter_type: filter_type
        included_fields:
        - ""
        - ""
      properties:
        filter:
          type: string
        filter_type:
          type: string
        included_fields:
          items: {}
          type: array
      type: object
      x-konfig-is-used-in-successful-response: true
    sites:
      items:
        $ref: '#/components/schemas/inbox_items_inner_site'
      type: array
      x-konfig-is-used-in-successful-response: true
    suggested-edits:
      items:
        $ref: '#/components/schemas/suggested_edits_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    tag_score_objects:
      items:
        $ref: '#/components/schemas/tag_score_objects_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    tag_synonyms:
      items:
        $ref: '#/components/schemas/tag_synonyms_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    tag_wikis:
      items:
        $ref: '#/components/schemas/tag_wikis_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    top_tag_objects:
      items:
        $ref: '#/components/schemas/top_tag_objects_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    user:
      example:
        reputation_change_quarter: 1
        link: link
        last_access_date: 7
        last_modified_date: 9
        reputation: 2
        badge_counts:
          gold: 4
          silver: 7
          bronze: 2
        answer_count: 5
        about_me: about_me
        accept_rate: 0
        reputation_change_year: 1
        profile_image: profile_image
        user_type: user_type
        down_vote_count: 2
        reputation_change_day: 4
        reputation_change_month: 7
        creation_date: 5
        display_name: display_name
        is_employee: true
        question_count: 3
        account_id: 6
        website_url: website_url
        reputation_change_week: 1
        user_id: 1
        timed_penalty_date: 6
        location: location
        age: 1
        up_vote_count: 7
        view_count: 4
      properties:
        about_me:
          type: string
        accept_rate:
          type: integer
        account_id:
          type: integer
        age:
          type: integer
        answer_count:
          type: integer
        badge_counts:
          $ref: '#/components/schemas/answers_inner_last_editor_badge_counts'
        creation_date:
          type: integer
        display_name:
          type: string
        down_vote_count:
          type: integer
        is_employee:
          type: boolean
        last_access_date:
          type: integer
        last_modified_date:
          type: integer
        link:
          type: string
        location:
          type: string
        profile_image:
          type: string
        question_count:
          type: integer
        reputation:
          type: integer
        reputation_change_day:
          type: integer
        reputation_change_month:
          type: integer
        reputation_change_quarter:
          type: integer
        reputation_change_week:
          type: integer
        reputation_change_year:
          type: integer
        timed_penalty_date:
          type: integer
        up_vote_count:
          type: integer
        user_id:
          type: integer
        user_type:
          type: string
        view_count:
          type: integer
        website_url:
          type: string
      type: object
      x-konfig-is-used-in-successful-response: true
    user_timeline_objects:
      items:
        $ref: '#/components/schemas/user_timeline_objects_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    users:
      items:
        $ref: '#/components/schemas/users_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    write_permissions:
      items:
        $ref: '#/components/schemas/write_permissions_inner'
      type: array
      x-konfig-is-used-in-successful-response: true
    konfig-generated-schema-single-parameter-schema-get--access-tokens-accessTokens:
      properties:
        accessTokens:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      required:
      - accessTokens
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - accessTokens
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--access-tokens-accessTokens-invalidate:
      properties:
        accessTokens:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      required:
      - accessTokens
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - accessTokens
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--answers:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--answers-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--answers-ids-comments:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--apps-accessTokens-de-authenticate:
      properties:
        accessTokens:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      required:
      - accessTokens
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - accessTokens
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--badges:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - rank
          - name
          - type
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--badges-name:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - rank
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--badges-recipients:
      properties:
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--badges-tags:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - rank
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--badges-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - rank
          - name
          - type
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--badges-ids-recipients:
      properties:
        ids:
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--comments:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--comments-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-post--comments-id-delete:
      properties:
        id:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        preview:
          type: boolean
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - filter
      - callback
      - site
      - preview
    konfig-generated-schema-single-parameter-schema-post--comments-id-edit:
      properties:
        id:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        body:
          type: string
        preview:
          type: boolean
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - filter
      - callback
      - site
      - body
      - preview
    konfig-generated-schema-single-parameter-schema-get--errors:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--errors-id:
      properties:
        id:
          type: integer
      required:
      - id
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
    konfig-generated-schema-single-parameter-schema-get--events:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        since:
          type: integer
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
      - since
    konfig-generated-schema-single-parameter-schema-get--filters-create:
      properties:
        base:
          type: string
        exclude:
          type: string
        include:
          type: string
        unsafe:
          type: boolean
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - base
      - exclude
      - include
      - unsafe
    konfig-generated-schema-single-parameter-schema-get--filters-filters:
      properties:
        filters:
          type: string
      required:
      - filters
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - filters
    konfig-generated-schema-single-parameter-schema-get--inbox:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--inbox-unread:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        since:
          type: integer
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - since
    konfig-generated-schema-single-parameter-schema-get--info:
      properties:
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - site
    konfig-generated-schema-single-parameter-schema-get--me:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-answers:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-associated:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--me-badges:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - rank
          - name
          - type
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-comments:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-comments-toId:
      properties:
        toId:
          type: integer
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - toId
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - toId
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-favorites:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - added
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-inbox:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-inbox-unread:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        since:
          type: integer
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
      - since
    konfig-generated-schema-single-parameter-schema-get--me-mentioned:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-merges:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--me-notifications:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-notifications-unread:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-privileges:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-questions:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-questions-featured:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-questions-no-answers:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-questions-unaccepted:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-questions-unanswered:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-reputation:
      properties:
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-reputation-history:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-reputation-history-full:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-suggested-edits:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - approval
          - rejection
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-tags:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - popular
          - activity
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-tags-tags-top-answers:
      properties:
        tags:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-tags-tags-top-questions:
      properties:
        tags:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - hot
          - week
          - month
          - relevance
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-timeline:
      properties:
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-top-answer-tags:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-top-question-tags:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--me-write-permissions:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--notifications:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--notifications-unread:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--posts:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--posts-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--posts-ids-comments:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--posts-ids-revisions:
      properties:
        ids:
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--posts-ids-suggested-edits:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - approval
          - rejection
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-post--posts-id-comments-add:
      properties:
        id:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        body:
          type: string
        preview:
          type: boolean
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - filter
      - callback
      - site
      - body
      - preview
    konfig-generated-schema-single-parameter-schema-get--privileges:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - hot
          - week
          - month
          - relevance
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-featured:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-no-answers:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-unanswered:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-ids-answers:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-ids-comments:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-ids-linked:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - rank
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-ids-related:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - rank
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--questions-ids-timeline:
      properties:
        ids:
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--revisions-ids:
      properties:
        ids:
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--search:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - relevance
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        intitle:
          type: string
        nottagged:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
      - intitle
      - nottagged
    konfig-generated-schema-single-parameter-schema-get--search-advanced:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - relevance
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        accepted:
          enum:
          - "true"
          - "false"
          type: string
        answers:
          type: integer
        body:
          type: string
        closed:
          enum:
          - "true"
          - "false"
          type: string
        migrated:
          enum:
          - "true"
          - "false"
          type: string
        notice:
          enum:
          - "true"
          - "false"
          type: string
        nottagged:
          type: string
        q:
          type: string
        title:
          type: string
        url:
          type: string
        user:
          type: integer
        views:
          type: integer
        wiki:
          enum:
          - "true"
          - "false"
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
      - accepted
      - answers
      - body
      - closed
      - migrated
      - notice
      - nottagged
      - q
      - title
      - url
      - user
      - views
      - wiki
    konfig-generated-schema-single-parameter-schema-get--similar:
      properties:
        tagged:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - relevance
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        nottagged:
          type: string
        title:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tagged
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
      - nottagged
      - title
    konfig-generated-schema-single-parameter-schema-get--sites:
      properties:
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--suggested-edits:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - approval
          - rejection
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--suggested-edits-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - approval
          - rejection
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - popular
          - activity
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-moderator-only:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - popular
          - activity
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-required:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - popular
          - activity
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-synonyms:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - applied
          - activity
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tags-faq:
      properties:
        tags:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tags-info:
      properties:
        tags:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - popular
          - activity
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tags-related:
      properties:
        tags:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tags-synonyms:
      properties:
        tags:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - applied
          - activity
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tags-wikis:
      properties:
        tags:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tags
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tag-top-answerers-period:
      properties:
        tag:
          type: string
        period:
          enum:
          - all_time
          - month
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - period
      - site
      - tag
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tag
      - period
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--tags-tag-top-askers-period:
      properties:
        tag:
          type: string
        period:
          enum:
          - all_time
          - month
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - period
      - site
      - tag
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - tag
      - period
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users:
      properties:
        inname:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - inname
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-moderators:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-moderators-elected:
      properties:
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - reputation
          - creation
          - name
          - modified
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-answers:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-associated:
      properties:
        ids:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--users-ids-badges:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - rank
          - name
          - type
          - awarded
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-comments:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-comments-toid:
      properties:
        ids:
          type: string
        toid:
          type: integer
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      - toid
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - toid
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-favorites:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          - added
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-mentioned:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-merges:
      properties:
        ids:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
      required:
      - ids
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - pagesize
      - page
      - filter
      - callback
    konfig-generated-schema-single-parameter-schema-get--users-ids-questions:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-questions-featured:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-questions-no-answers:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-questions-unaccepted:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-questions-unanswered:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-reputation:
      properties:
        ids:
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-reputation-history:
      properties:
        ids:
          type: string
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-suggested-edits:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - creation
          - approval
          - rejection
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-tags:
      properties:
        ids:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - popular
          - activity
          - name
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-ids-timeline:
      properties:
        ids:
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - ids
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - ids
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-inbox:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-inbox-unread:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
        since:
          type: integer
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
      - since
    konfig-generated-schema-single-parameter-schema-get--users-id-notifications:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-notifications-unread:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-privileges:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-reputation-history-full:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-tags-tags-top-answers:
      properties:
        id:
          type: integer
        tags:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - tags
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-tags-tags-top-questions:
      properties:
        id:
          type: integer
        tags:
          type: string
        order:
          enum:
          - desc
          - asc
          type: string
        max:
          type: string
        min:
          type: string
        sort:
          enum:
          - activity
          - creation
          - votes
          type: string
        fromdate:
          type: integer
        todate:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      - tags
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - tags
      - order
      - max
      - min
      - sort
      - fromdate
      - todate
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-top-answer-tags:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-top-question-tags:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    konfig-generated-schema-single-parameter-schema-get--users-id-write-permissions:
      properties:
        id:
          type: integer
        pagesize:
          type: integer
        page:
          type: integer
        filter:
          type: string
        callback:
          type: string
        site:
          type: string
      required:
      - id
      - site
      type: object
      x-do-not-generate: true
      x-konfig-is-parameter:
      - id
      - pagesize
      - page
      - filter
      - callback
      - site
    tags_inner:
      example:
        is_required: true
        user_id: 1
        synonyms:
        - ""
        - ""
        count: 0
        name: name
        has_synonyms: true
        is_moderator_only: true
        last_activity_date: 6
      properties:
        count:
          type: integer
        has_synonyms:
          type: boolean
        is_moderator_only:
          type: boolean
        is_required:
          type: boolean
        last_activity_date:
          type: integer
        name:
          type: string
        synonyms:
          items: {}
          type: array
        user_id:
          type: integer
      type: object
    access_tokens_inner:
      example:
        access_token: access_token
        account_id: 0
        scope:
        - ""
        - ""
        expires_on_date: 6
      properties:
        access_token:
          type: string
        account_id:
          type: integer
        expires_on_date:
          type: integer
        scope:
          items: {}
          type: array
      type: object
    account_merge_inner:
      example:
        new_account_id: 6
        old_account_id: 1
        merge_date: 0
      properties:
        merge_date:
          type: integer
        new_account_id:
          type: integer
        old_account_id:
          type: integer
      type: object
    answers_inner_last_editor_badge_counts:
      example:
        gold: 4
        silver: 7
        bronze: 2
      properties:
        bronze:
          type: integer
        gold:
          type: integer
        silver:
          type: integer
      type: object
    answers_inner_last_editor:
      example:
        profile_image: profile_image
        user_type: user_type
        user_id: 1
        link: link
        reputation: 1
        badge_counts:
          gold: 4
          silver: 7
          bronze: 2
        display_name: display_name
        accept_rate: 3
      properties:
        accept_rate:
          type: integer
        badge_counts:
          $ref: '#/components/schemas/answers_inner_last_editor_badge_counts'
        display_name:
          type: string
        link:
          type: string
        profile_image:
          type: string
        reputation:
          type: integer
        user_id:
          type: integer
        user_type:
          type: string
      type: object
    answers_inner:
      example:
        comment_count: 1
        link: link
        locked_date: 1
        can_flag: true
        title: title
        body: body
        answer_id: 0
        community_owned_date: 5
        score: 7
        downvoted: true
        down_vote_count: 2
        awarded_bounty_amount: 6
        owner:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        is_accepted: true
        comments:
        - ""
        - ""
        last_editor:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        awarded_bounty_users:
        - ""
        - ""
        accepted: true
        last_activity_date: 7
        creation_date: 5
        question_id: 6
        tags:
        - ""
        - ""
        share_link: share_link
        body_markdown: body_markdown
        upvoted: true
        up_vote_count: 1
        last_edit_date: 9
      properties:
        tags:
          items: {}
          type: array
        title:
          type: string
        accepted:
          type: boolean
        answer_id:
          type: integer
        awarded_bounty_amount:
          type: integer
        awarded_bounty_users:
          items: {}
          type: array
        body:
          type: string
        body_markdown:
          type: string
        can_flag:
          type: boolean
        comment_count:
          type: integer
        comments:
          items: {}
          type: array
        community_owned_date:
          type: integer
        creation_date:
          type: integer
        down_vote_count:
          type: integer
        downvoted:
          type: boolean
        is_accepted:
          type: boolean
        last_activity_date:
          type: integer
        last_edit_date:
          type: integer
        last_editor:
          $ref: '#/components/schemas/answers_inner_last_editor'
        link:
          type: string
        locked_date:
          type: integer
        owner:
          $ref: '#/components/schemas/answers_inner_last_editor'
        question_id:
          type: integer
        score:
          type: integer
        share_link:
          type: string
        up_vote_count:
          type: integer
        upvoted:
          type: boolean
      type: object
    badges_inner:
      example:
        badge_id: 6
        link: link
        name: name
        description: description
        rank: rank
        badge_type: badge_type
        user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        award_count: 0
      properties:
        description:
          type: string
        award_count:
          type: integer
        badge_id:
          type: integer
        badge_type:
          type: string
        link:
          type: string
        name:
          type: string
        rank:
          type: string
        user:
          $ref: '#/components/schemas/answers_inner_last_editor'
      type: object
    comments_inner:
      example:
        owner:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        edited: true
        link: link
        can_flag: true
        creation_date: 6
        body: body
        comment_id: 0
        score: 5
        body_markdown: body_markdown
        post_id: 1
        reply_to_user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        upvoted: true
        post_type: post_type
      properties:
        body:
          type: string
        body_markdown:
          type: string
        can_flag:
          type: boolean
        comment_id:
          type: integer
        creation_date:
          type: integer
        edited:
          type: boolean
        link:
          type: string
        owner:
          $ref: '#/components/schemas/answers_inner_last_editor'
        post_id:
          type: integer
        post_type:
          type: string
        reply_to_user:
          $ref: '#/components/schemas/answers_inner_last_editor'
        score:
          type: integer
        upvoted:
          type: boolean
      type: object
    errors_inner:
      example:
        error_name: error_name
        error_id: 0
        description: description
      properties:
        description:
          type: string
        error_id:
          type: integer
        error_name:
          type: string
      type: object
    events_inner:
      example:
        event_type: event_type
        the id of the object (answer, comment, question, or user) the event describes: 6
        link: link
        creation_date: 0
        excerpt: excerpt
      properties:
        creation_date:
          type: integer
        event_type:
          type: string
        excerpt:
          type: string
        link:
          type: string
        the id of the object (answer, comment, question, or user) the event describes:
          type: integer
      type: object
    filters_inner:
      example:
        filter: filter
        filter_type: filter_type
        included_fields:
        - ""
        - ""
      properties:
        filter:
          type: string
        filter_type:
          type: string
        included_fields:
          items: {}
          type: array
      type: object
    inbox_items_inner_site_styling:
      example:
        tag_background_color: tag_background_color
        link_color: link_color
        tag_foreground_color: tag_foreground_color
      properties:
        link_color:
          type: string
        tag_background_color:
          type: string
        tag_foreground_color:
          type: string
      type: object
    inbox_items_inner_site:
      example:
        icon_url: icon_url
        audience: audience
        aliases:
        - ""
        - ""
        favicon_url: favicon_url
        site_type: site_type
        logo_url: logo_url
        api_site_parameter: api_site_parameter
        open_beta_date: 7
        site_state: site_state
        related_sites:
        - ""
        - ""
        closed_beta_date: 5
        markdown_extensions:
        - ""
        - ""
        site_url: site_url
        styling:
          tag_background_color: tag_background_color
          link_color: link_color
          tag_foreground_color: tag_foreground_color
        name: name
        high_resolution_icon_url: high_resolution_icon_url
        twitter_account: twitter_account
        launch_date: 2
      properties:
        aliases:
          items: {}
          type: array
        api_site_parameter:
          type: string
        audience:
          type: string
        closed_beta_date:
          type: integer
        favicon_url:
          type: string
        high_resolution_icon_url:
          type: string
        icon_url:
          type: string
        launch_date:
          type: integer
        logo_url:
          type: string
        markdown_extensions:
          items: {}
          type: array
        name:
          type: string
        open_beta_date:
          type: integer
        related_sites:
          items: {}
          type: array
        site_state:
          type: string
        site_type:
          type: string
        site_url:
          type: string
        styling:
          $ref: '#/components/schemas/inbox_items_inner_site_styling'
        twitter_account:
          type: string
      type: object
    inbox_items_inner:
      example:
        site:
          icon_url: icon_url
          audience: audience
          aliases:
          - ""
          - ""
          favicon_url: favicon_url
          site_type: site_type
          logo_url: logo_url
          api_site_parameter: api_site_parameter
          open_beta_date: 7
          site_state: site_state
          related_sites:
          - ""
          - ""
          closed_beta_date: 5
          markdown_extensions:
          - ""
          - ""
          site_url: site_url
          styling:
            tag_background_color: tag_background_color
            link_color: link_color
            tag_foreground_color: tag_foreground_color
          name: name
          high_resolution_icon_url: high_resolution_icon_url
          twitter_account: twitter_account
          launch_date: 2
        item_type: item_type
        is_unread: true
        link: link
        creation_date: 1
        title: title
        body: body
        comment_id: 6
        answer_id: 0
        question_id: 5
      properties:
        title:
          type: string
        answer_id:
          type: integer
        body:
          type: string
        comment_id:
          type: integer
        creation_date:
          type: integer
        is_unread:
          type: boolean
        item_type:
          type: string
        link:
          type: string
        question_id:
          type: integer
        site:
          $ref: '#/components/schemas/inbox_items_inner_site'
      type: object
    network_users_inner:
      example:
        last_access_date: 5
        reputation: 2
        badge_counts:
          gold: 4
          silver: 7
          bronze: 2
        creation_date: 1
        answer_count: 6
        question_count: 5
        site_name: site_name
        account_id: 0
        user_type: user_type
        site_url: site_url
        user_id: 7
        top_questions:
        - ""
        - ""
        top_answers:
        - ""
        - ""
      properties:
        account_id:
          type: integer
        answer_count:
          type: integer
        badge_counts:
          $ref: '#/components/schemas/answers_inner_last_editor_badge_counts'
        creation_date:
          type: integer
        last_access_date:
          type: integer
        question_count:
          type: integer
        reputation:
          type: integer
        site_name:
          type: string
        site_url:
          type: string
        top_answers:
          items: {}
          type: array
        top_questions:
          items: {}
          type: array
        user_id:
          type: integer
        user_type:
          type: string
      type: object
    notifications_inner:
      example:
        notification_type: notification_type
        site:
          icon_url: icon_url
          audience: audience
          aliases:
          - ""
          - ""
          favicon_url: favicon_url
          site_type: site_type
          logo_url: logo_url
          api_site_parameter: api_site_parameter
          open_beta_date: 7
          site_state: site_state
          related_sites:
          - ""
          - ""
          closed_beta_date: 5
          markdown_extensions:
          - ""
          - ""
          site_url: site_url
          styling:
            tag_background_color: tag_background_color
            link_color: link_color
            tag_foreground_color: tag_foreground_color
          name: name
          high_resolution_icon_url: high_resolution_icon_url
          twitter_account: twitter_account
          launch_date: 2
        post_id: 6
        is_unread: true
        creation_date: 0
        body: body
      properties:
        body:
          type: string
        creation_date:
          type: integer
        is_unread:
          type: boolean
        notification_type:
          type: string
        post_id:
          type: integer
        site:
          $ref: '#/components/schemas/inbox_items_inner_site'
      type: object
    posts_inner:
      example:
        comment_count: 0
        owner:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        comments:
        - ""
        - ""
        last_editor:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        link: link
        last_activity_date: 5
        creation_date: 6
        title: title
        body: body
        share_link: share_link
        score: 7
        downvoted: true
        body_markdown: body_markdown
        down_vote_count: 1
        post_id: 2
        upvoted: true
        post_type: post_type
        up_vote_count: 9
        last_edit_date: 5
      properties:
        title:
          type: string
        body:
          type: string
        body_markdown:
          type: string
        comment_count:
          type: integer
        comments:
          items: {}
          type: array
        creation_date:
          type: integer
        down_vote_count:
          type: integer
        downvoted:
          type: boolean
        last_activity_date:
          type: integer
        last_edit_date:
          type: integer
        last_editor:
          $ref: '#/components/schemas/answers_inner_last_editor'
        link:
          type: string
        owner:
          $ref: '#/components/schemas/answers_inner_last_editor'
        post_id:
          type: integer
        post_type:
          type: string
        score:
          type: integer
        share_link:
          type: string
        up_vote_count:
          type: integer
        upvoted:
          type: boolean
      type: object
    privileges_inner:
      example:
        short_description: short_description
        description: description
        reputation: 0
      properties:
        description:
          type: string
        reputation:
          type: integer
        short_description:
          type: string
      type: object
    question_timeline_events_inner:
      example:
        owner:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        down_vote_count: 1
        post_id: 5
        creation_date: 6
        revision_guid: revision_guid
        comment_id: 0
        question_id: 5
        user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        up_vote_count: 2
        timeline_type: timeline_type
      properties:
        comment_id:
          type: integer
        creation_date:
          type: integer
        down_vote_count:
          type: integer
        owner:
          $ref: '#/components/schemas/answers_inner_last_editor'
        post_id:
          type: integer
        question_id:
          type: integer
        revision_guid:
          type: string
        timeline_type:
          type: string
        up_vote_count:
          type: integer
        user:
          $ref: '#/components/schemas/answers_inner_last_editor'
      type: object
    questions_inner_closed_details:
      example:
        reason: reason
        by_users:
        - ""
        - ""
        original_questions:
        - ""
        - ""
        description: description
        on_hold: true
      properties:
        description:
          type: string
        by_users:
          items: {}
          type: array
        on_hold:
          type: boolean
        original_questions:
          items: {}
          type: array
        reason:
          type: string
      type: object
    questions_inner_migrated_from:
      example:
        other_site:
          icon_url: icon_url
          audience: audience
          aliases:
          - ""
          - ""
          favicon_url: favicon_url
          site_type: site_type
          logo_url: logo_url
          api_site_parameter: api_site_parameter
          open_beta_date: 7
          site_state: site_state
          related_sites:
          - ""
          - ""
          closed_beta_date: 5
          markdown_extensions:
          - ""
          - ""
          site_url: site_url
          styling:
            tag_background_color: tag_background_color
            link_color: link_color
            tag_foreground_color: tag_foreground_color
          name: name
          high_resolution_icon_url: high_resolution_icon_url
          twitter_account: twitter_account
          launch_date: 2
        on_date: 6
        question_id: 7
      properties:
        on_date:
          type: integer
        other_site:
          $ref: '#/components/schemas/inbox_items_inner_site'
        question_id:
          type: integer
      type: object
    questions_inner_notice:
      example:
        owner_user_id: 4
        creation_date: 1
        body: body
      properties:
        body:
          type: string
        creation_date:
          type: integer
        owner_user_id:
          type: integer
      type: object
    questions_inner:
      example:
        comment_count: 7
        closed_date: 2
        closed_details:
          reason: reason
          by_users:
          - ""
          - ""
          original_questions:
          - ""
          - ""
          description: description
          on_hold: true
        answers:
        - ""
        - ""
        link: link
        locked_date: 1
        can_flag: true
        title: title
        answer_count: 6
        body: body
        community_owned_date: 9
        score: 6
        accepted_answer_id: 0
        downvoted: true
        down_vote_count: 4
        reopen_vote_count: 9
        bounty_closes_date: 5
        closed_reason: closed_reason
        favorite_count: 7
        migrated_to:
          other_site:
            icon_url: icon_url
            audience: audience
            aliases:
            - ""
            - ""
            favicon_url: favicon_url
            site_type: site_type
            logo_url: logo_url
            api_site_parameter: api_site_parameter
            open_beta_date: 7
            site_state: site_state
            related_sites:
            - ""
            - ""
            closed_beta_date: 5
            markdown_extensions:
            - ""
            - ""
            site_url: site_url
            styling:
              tag_background_color: tag_background_color
              link_color: link_color
              tag_foreground_color: tag_foreground_color
            name: name
            high_resolution_icon_url: high_resolution_icon_url
            twitter_account: twitter_account
            launch_date: 2
          on_date: 6
          question_id: 7
        favorited: true
        notice:
          owner_user_id: 4
          creation_date: 1
          body: body
        owner:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        comments:
        - ""
        - ""
        last_editor:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        last_activity_date: 1
        migrated_from:
          other_site:
            icon_url: icon_url
            audience: audience
            aliases:
            - ""
            - ""
            favicon_url: favicon_url
            site_type: site_type
            logo_url: logo_url
            api_site_parameter: api_site_parameter
            open_beta_date: 7
            site_state: site_state
            related_sites:
            - ""
            - ""
            closed_beta_date: 5
            markdown_extensions:
            - ""
            - ""
            site_url: site_url
            styling:
              tag_background_color: tag_background_color
              link_color: link_color
              tag_foreground_color: tag_foreground_color
            name: name
            high_resolution_icon_url: high_resolution_icon_url
            twitter_account: twitter_account
            launch_date: 2
          on_date: 6
          question_id: 7
        creation_date: 3
        question_id: 9
        tags:
        - ""
        - ""
        share_link: share_link
        can_close: true
        bounty_amount: 1
        body_markdown: body_markdown
        bounty_user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        upvoted: true
        protected_date: 5
        is_answered: true
        close_vote_count: 5
        delete_vote_count: 2
        up_vote_count: 8
        view_count: 9
        last_edit_date: 1
      properties:
        tags:
          items: {}
          type: array
        title:
          type: string
        accepted_answer_id:
          type: integer
        answer_count:
          type: integer
        answers:
          items: {}
          type: array
        body:
          type: string
        body_markdown:
          type: string
        bounty_amount:
          type: integer
        bounty_closes_date:
          type: integer
        bounty_user:
          $ref: '#/components/schemas/answers_inner_last_editor'
        can_close:
          type: boolean
        can_flag:
          type: boolean
        close_vote_count:
          type: integer
        closed_date:
          type: integer
        closed_details:
          $ref: '#/components/schemas/questions_inner_closed_details'
        closed_reason:
          type: string
        comment_count:
          type: integer
        comments:
          items: {}
          type: array
        community_owned_date:
          type: integer
        creation_date:
          type: integer
        delete_vote_count:
          type: integer
        down_vote_count:
          type: integer
        downvoted:
          type: boolean
        favorite_count:
          type: integer
        favorited:
          type: boolean
        is_answered:
          type: boolean
        last_activity_date:
          type: integer
        last_edit_date:
          type: integer
        last_editor:
          $ref: '#/components/schemas/answers_inner_last_editor'
        link:
          type: string
        locked_date:
          type: integer
        migrated_from:
          $ref: '#/components/schemas/questions_inner_migrated_from'
        migrated_to:
          $ref: '#/components/schemas/questions_inner_migrated_from'
        notice:
          $ref: '#/components/schemas/questions_inner_notice'
        owner:
          $ref: '#/components/schemas/answers_inner_last_editor'
        protected_date:
          type: integer
        question_id:
          type: integer
        reopen_vote_count:
          type: integer
        score:
          type: integer
        share_link:
          type: string
        up_vote_count:
          type: integer
        upvoted:
          type: boolean
        view_count:
          type: integer
      type: object
    reputation_changes_inner:
      example:
        post_id: 6
        vote_type: vote_type
        user_id: 5
        reputation_change: 1
        link: link
        post_type: post_type
        title: title
        on_date: 0
      properties:
        title:
          type: string
        link:
          type: string
        on_date:
          type: integer
        post_id:
          type: integer
        post_type:
          type: string
        reputation_change:
          type: integer
        user_id:
          type: integer
        vote_type:
          type: string
      type: object
    reputation_history_inner:
      example:
        post_id: 6
        reputation_history_type: reputation_history_type
        user_id: 5
        reputation_change: 1
        creation_date: 0
      properties:
        creation_date:
          type: integer
        post_id:
          type: integer
        reputation_change:
          type: integer
        reputation_history_type:
          type: string
        user_id:
          type: integer
      type: object
    revisions_inner:
      example:
        last_tags:
        - ""
        - ""
        revision_number: 1
        creation_date: 0
        revision_guid: revision_guid
        title: title
        body: body
        is_rollback: true
        tags:
        - ""
        - ""
        revision_type: revision_type
        last_body: last_body
        post_id: 6
        comment: comment
        post_type: post_type
        last_title: last_title
        user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        set_community_wiki: true
      properties:
        tags:
          items: {}
          type: array
        title:
          type: string
        body:
          type: string
        comment:
          type: string
        creation_date:
          type: integer
        is_rollback:
          type: boolean
        last_body:
          type: string
        last_tags:
          items: {}
          type: array
        last_title:
          type: string
        post_id:
          type: integer
        post_type:
          type: string
        revision_guid:
          type: string
        revision_number:
          type: integer
        revision_type:
          type: string
        set_community_wiki:
          type: boolean
        user:
          $ref: '#/components/schemas/answers_inner_last_editor'
      type: object
    suggested_edits_inner:
      example:
        rejection_date: 5
        approval_date: 0
        post_id: 1
        proposing_user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        comment: comment
        post_type: post_type
        creation_date: 6
        title: title
        body: body
        suggested_edit_id: 5
        tags:
        - ""
        - ""
      properties:
        tags:
          items: {}
          type: array
        title:
          type: string
        approval_date:
          type: integer
        body:
          type: string
        comment:
          type: string
        creation_date:
          type: integer
        post_id:
          type: integer
        post_type:
          type: string
        proposing_user:
          $ref: '#/components/schemas/answers_inner_last_editor'
        rejection_date:
          type: integer
        suggested_edit_id:
          type: integer
      type: object
    tag_score_objects_inner:
      example:
        score: 6
        post_count: 0
        user:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
      properties:
        post_count:
          type: integer
        score:
          type: integer
        user:
          $ref: '#/components/schemas/answers_inner_last_editor'
      type: object
    tag_synonyms_inner:
      example:
        from_tag: from_tag
        last_applied_date: 1
        creation_date: 6
        to_tag: to_tag
        applied_count: 0
      properties:
        applied_count:
          type: integer
        creation_date:
          type: integer
        from_tag:
          type: string
        last_applied_date:
          type: integer
        to_tag:
          type: string
      type: object
    tag_wikis_inner:
      example:
        last_body_editor:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        tag_name: tag_name
        last_excerpt_editor:
          profile_image: profile_image
          user_type: user_type
          user_id: 1
          link: link
          reputation: 1
          badge_counts:
            gold: 4
            silver: 7
            bronze: 2
          display_name: display_name
          accept_rate: 3
        body: body
        excerpt: excerpt
        excerpt_last_edit_date: 6
        body_last_edit_date: 0
      properties:
        body:
          type: string
        body_last_edit_date:
          type: integer
        excerpt:
          type: string
        excerpt_last_edit_date:
          type: integer
        last_body_editor:
          $ref: '#/components/schemas/answers_inner_last_editor'
        last_excerpt_editor:
          $ref: '#/components/schemas/answers_inner_last_editor'
        tag_name:
          type: string
      type: object
    top_tag_objects_inner:
      example:
        question_count: 1
        user_id: 5
        tag_name: tag_name
        question_score: 5
        answer_count: 0
        answer_score: 6
      properties:
        answer_count:
          type: integer
        answer_score:
          type: integer
        question_count:
          type: integer
        question_score:
          type: integer
        tag_name:
          type: string
        user_id:
          type: integer
      type: object
    user_timeline_objects_inner:
      example:
        post_id: 5
        user_id: 2
        badge_id: 0
        link: link
        post_type: post_type
        creation_date: 1
        detail: detail
        title: title
        comment_id: 6
        suggested_edit_id: 5
        timeline_type: timeline_type
      properties:
        title:
          type: string
        badge_id:
          type: integer
        comment_id:
          type: integer
        creation_date:
          type: integer
        detail:
          type: string
        link:
          type: string
        post_id:
          type: integer
        post_type:
          type: string
        suggested_edit_id:
          type: integer
        timeline_type:
          type: string
        user_id:
          type: integer
      type: object
    users_inner:
      example:
        reputation_change_quarter: 1
        link: link
        last_access_date: 7
        last_modified_date: 9
        reputation: 2
        badge_counts:
          gold: 4
          silver: 7
          bronze: 2
        answer_count: 5
        about_me: about_me
        accept_rate: 0
        reputation_change_year: 1
        profile_image: profile_image
        user_type: user_type
        down_vote_count: 2
        reputation_change_day: 4
        reputation_change_month: 7
        creation_date: 5
        display_name: display_name
        is_employee: true
        question_count: 3
        account_id: 6
        website_url: website_url
        reputation_change_week: 1
        user_id: 1
        timed_penalty_date: 6
        location: location
        age: 1
        up_vote_count: 7
        view_count: 4
      properties:
        about_me:
          type: string
        accept_rate:
          type: integer
        account_id:
          type: integer
        age:
          type: integer
        answer_count:
          type: integer
        badge_counts:
          $ref: '#/components/schemas/answers_inner_last_editor_badge_counts'
        creation_date:
          type: integer
        display_name:
          type: string
        down_vote_count:
          type: integer
        is_employee:
          type: boolean
        last_access_date:
          type: integer
        last_modified_date:
          type: integer
        link:
          type: string
        location:
          type: string
        profile_image:
          type: string
        question_count:
          type: integer
        reputation:
          type: integer
        reputation_change_day:
          type: integer
        reputation_change_month:
          type: integer
        reputation_change_quarter:
          type: integer
        reputation_change_week:
          type: integer
        reputation_change_year:
          type: integer
        timed_penalty_date:
          type: integer
        up_vote_count:
          type: integer
        user_id:
          type: integer
        user_type:
          type: string
        view_count:
          type: integer
        website_url:
          type: string
      type: object
    write_permissions_inner:
      example:
        min_seconds_between_actions: 6
        max_daily_actions: 0
        object_type: object_type
        user_id: 1
        can_delete: true
        can_edit: true
        can_add: true
      properties:
        can_add:
          type: boolean
        can_delete:
          type: boolean
        can_edit:
          type: boolean
        max_daily_actions:
          type: integer
        min_seconds_between_actions:
          type: integer
        object_type:
          type: string
        user_id:
          type: integer
      type: object
  securitySchemes:
    oauth_2_0:
      description: |
        The Stack Exchange API offers user authentication via OAuth 2.0, specifically templated after Facebook's implementation. There are two flows, an explicit grant for server side applications and an implicit one for pure browser based ones.

        #The explicit OAuth 2.0 flow consists of the following steps:
        1. Send a user to https://stackexchange.com/oauth, with these query string parameters
        - client_id
        - scope
        - redirect_uri - must be under an apps registered domain
        - state - optional
        2. The user approves your app
        3. The user is redirected to redirect_uri, with these query string parameters
        - code
        - state - optional, only returned if provided in the first step
        4. POST (application/x-www-form-urlencoded) the following parameters to https://stackexchange.com/oauth/access_token
        - client_id
        - client_secret
        - code - from the previous step
        - redirect_uri - must be the same as the provided in the first step
        This request is responded to with either an error (HTTP status code 400) or an access token of the form access_token=...&expires=1234. expires will only be set if scope does not include no_expiry, the use of which is strongly advised against unless your app truly needs perpetual access.

        #The implicit OAuth 2.0 flow consists of the following steps:

        1. Open a new window at https://stackexchange.com/oauth/dialog, with these query string parameters
        - client_id
        - scope (details)
        - redirect_uri - must be under an apps registered domain
        - state - optional
        2. The user approves your app
        3. The user is redirected to redirect_uri, with these parameters in the hash
        - access_token
        - expires - optional, only if scope doesn't contain no_expiry
        The explicit flow should be used by server-side applications, with special care taken to never leak client_secret. Client side applications should use the implicit flow.

        Once you have authenticated a user once, regardless of flow, subsequent re-authorizations will occur without requiring user action. Naturally, should a user revoke an applications permissions then further action will be required to re-authorize.

        Applications using the implicit flow can make use of our provided minimalistic Javascript SDK.

        #Scope

        With an empty scope, authentication will only allow an application to identify a user via the /me method. In order to access other information, different scope values must be sent. Multiple values may be sent in scope by comma or space delimitting them.

        - read_inbox - access a user's global inbox
        - no_expiry - access_token's with this scope do not expire
        - write_access - perform write operations as a user 2.1
        - private_info - access full history of a user's private actions on the site 2.1

        #Desktop Applications

        Desktop applications cannot participate directly in OAuth 2.0 flows, however the embeddable browser controls available in most frameworks make it possible to work around this limitation.

        Desktop applications should use the implicit client-side flow, hosting the process within a browser control. For redirect_uri, a value of https://stackexchange.com/oauth/login_success should be used. Upon a successful authentication, access_token will be placed in the url hash as with a standard implicit authentication.

        #Usage

        Access tokens can be passed (as access_token) to any method to grant applications an increased throttle quota. When passing an access token an app must pass its request key as well, if you don't have a request key you can obtain one by registering your application on Stack Apps (http://stackapps.com/users/login?returnurl=/apps/oauth/register).
      flows:
        implicit:
          authorizationUrl: https://stackexchange.com/oauth
          scopes: {}
      type: oauth2
      x-konfig-globally-required-security: false

